use crate::artifacts::os::windows::shellitems::items::get_shellitem;
use deno_core::{anyhow::anyhow, error::AnyError, op2, JsBuffer, ToJsBuffer};
use serde::Serialize;

#[derive(Serialize)]
pub(crate) struct JsShellitem {
    item: String,
    remaining: ToJsBuffer,
}

#[op2]
#[serde]
/// Parse raw shellitem bytes and return remaining bytes
pub(crate) fn js_get_shellitem(#[buffer] data: JsBuffer) -> Result<JsShellitem, AnyError> {
    let results = get_shellitem(&data);
    let (remaining, item_data) = match results {
        Ok(result) => result,
        Err(_) => return Err(anyhow!("Failed to get shellitem")),
    };

    let item = serde_json::to_string(&item_data)?;
    let value = JsShellitem {
        item,
        remaining: remaining.to_vec().into(),
    };
    Ok(value)
}

#[cfg(test)]
mod tests {
    use crate::{
        runtime::deno::execute_script, structs::artifacts::runtime::script::JSScript,
        structs::toml::Output,
    };

    fn output_options(name: &str, output: &str, directory: &str, compress: bool) -> Output {
        Output {
            name: name.to_string(),
            directory: directory.to_string(),
            format: String::from("json"),
            compress,
            url: Some(String::new()),
            api_key: Some(String::new()),
            endpoint_id: String::from("abcd"),
            collection_id: 0,
            output: output.to_string(),
            filter_name: None,
            filter_script: None,
            logging: None,
        }
    }

    #[test]
    fn test_js_get_shellitem() {
        let test = "";
        let mut output = output_options("runtime_test", "local", "./tmp", false);
        let script = JSScript {
            name: String::from("shellitems"),
            script: test.to_string(),
        };
        execute_script(&mut output, &script).unwrap();
    }
}
