use crate::utils::{
    encoding::base64_encode_standard,
    nom_helper::{
        nom_unsigned_eight_bytes, nom_unsigned_four_bytes, nom_unsigned_one_byte, Endian,
    },
    strings::extract_utf8_string,
};
use log::error;
use nom::bytes::complete::{take, take_while};
use plist::Dictionary;
use serde::Serialize;

#[derive(Debug, Serialize)]
pub(crate) struct CodeSign {
    pub(crate) directory: CodeDirectory,
    pub(crate) entitlements: Dictionary,
    pub(crate) embedded_entitlements: String,
    pub(crate) certs: String,
}

#[derive(Debug, Serialize)]
pub(crate) struct CodeDirectory {
    pub(crate) id: String,
    pub(crate) team_id: String,
    pub(crate) flags: u32,
    pub(crate) magic: u32,
    pub(crate) length: u32,
    pub(crate) version: u32,
    pub(crate) hash_offset: u32,
    pub(crate) ident_offset: u32,
    pub(crate) n_special_slots: u32,
    pub(crate) n_code_slots: u32,
    pub(crate) code_limit: u32,
    pub(crate) hash_size: u8,
    pub(crate) hash_type: u8,
    pub(crate) platform: u8,
    pub(crate) page_size: u8,
    pub(crate) spare2: u32,
    pub(crate) hash_pages: Vec<String>,
}

#[allow(dead_code)]
struct Requirements {
    magic: u32,
    unknown: u32,
    unknown2: u32,
    unknown3: u32,
    size: u32,
}

impl CodeSign {
    /// Parse and extract some of the Code signing info
    pub(crate) fn parse_codesign(data: &[u8]) -> nom::IResult<&[u8], CodeSign> {
        let (sign_data, _blob_magic) = nom_unsigned_four_bytes(data, Endian::Be)?;
        let (sign_data, blob_length) = nom_unsigned_four_bytes(sign_data, Endian::Be)?;
        let (mut sign_data, blob_count) = nom_unsigned_four_bytes(sign_data, Endian::Be)?;

        let (_, codesign_data) = take(blob_length)(data)?;
        let mut count = 0;

        let mut code_sign = CodeSign {
            directory: CodeDirectory {
                id: String::new(),
                team_id: String::new(),
                hash_type: 0,
                version: 0,
                flags: 0,
                magic: 0,
                length: 0,
                hash_offset: 0,
                ident_offset: 0,
                n_special_slots: 0,
                n_code_slots: 0,
                code_limit: 0,
                hash_size: 0,
                platform: 0,
                page_size: 0,
                spare2: 0,
                hash_pages: Vec::new(),
            },
            entitlements: Dictionary::new(),
            embedded_entitlements: String::new(),
            certs: String::new(),
        };
        while count < blob_count {
            let (remaining_data, _blob_type) = nom_unsigned_four_bytes(sign_data, Endian::Be)?;
            let (remaining_data, blob_offset) =
                nom_unsigned_four_bytes(remaining_data, Endian::Be)?;
            sign_data = remaining_data;

            let (blob_data, _) = take(blob_offset)(codesign_data)?;
            let (_, blob_magic) = nom_unsigned_four_bytes(blob_data, Endian::Be)?;
            match blob_magic {
                0xfade0c02 => {
                    let cd_result = CodeSign::parse_code_directory(blob_data);
                    code_sign.directory = match cd_result {
                        Ok((_, result)) => result,
                        Err(err) => {
                            error!("[macho] Failed to parse code directory data: {err:?}");
                            count += 1;
                            continue;
                        }
                    }
                }
                0xfade0c01 => {
                    let _result = CodeSign::parse_requirements(blob_data);
                }
                0xfade0b01 => {
                    let certs_result = CodeSign::parse_certs(blob_data);
                    code_sign.certs = match certs_result {
                        Ok((_, result)) => result,
                        Err(err) => {
                            error!("[macho] Failed to parse certs data: {err:?}");
                            count += 1;
                            continue;
                        }
                    }
                }
                0xfade7171 => {
                    let ent_result = CodeSign::parse_entitlements(blob_data);
                    code_sign.entitlements = match ent_result {
                        Ok((_, result)) => result,
                        Err(err) => {
                            error!("[macho] Failed to parse entitlements data: {err:?}");
                            count += 1;
                            continue;
                        }
                    }
                }
                0xfade7172 => {
                    let ent_result = CodeSign::parse_embedded_entitlements(blob_data);
                    code_sign.embedded_entitlements = match ent_result {
                        Ok((_, result)) => result,
                        Err(err) => {
                            error!("[macho] Failed to parse embedded entitlements data: {err:?}");
                            count += 1;
                            continue;
                        }
                    };
                }
                _ => {}
            };

            count += 1;
        }

        Ok((sign_data, code_sign))
    }

    /// Get requirements data from macho file
    fn parse_requirements(data: &[u8]) -> nom::IResult<&[u8], Requirements> {
        let (req_data, magic) = nom_unsigned_four_bytes(data, Endian::Be)?;
        let (req_data, unknown) = nom_unsigned_four_bytes(req_data, Endian::Be)?;
        let (req_data, unknown2) = nom_unsigned_four_bytes(req_data, Endian::Be)?;
        let (req_data, unknown3) = nom_unsigned_four_bytes(req_data, Endian::Be)?;
        let (req_data, size) = nom_unsigned_four_bytes(req_data, Endian::Be)?;

        let requirements = Requirements {
            magic,
            unknown,
            unknown2,
            unknown3,
            size,
        };

        Ok((req_data, requirements))
    }

    /// Extract the certs from the binary
    fn parse_certs(data: &[u8]) -> nom::IResult<&[u8], String> {
        let (cert_data, _magic_data) = nom_unsigned_four_bytes(data, Endian::Be)?;
        let (cert_data, length) = nom_unsigned_four_bytes(cert_data, Endian::Be)?;

        let preamble_size = 8;
        let (remaining_data, cert_data) = take(length - preamble_size)(cert_data)?;

        // Can base64 decode and extract with:
        //   openssl pkcs7 -inform DER -in <file.raw> -print_certs -text -noout
        Ok((remaining_data, base64_encode_standard(cert_data)))
    }

    /// Extract the entitlements from the binary
    fn parse_entitlements(data: &[u8]) -> nom::IResult<&[u8], Dictionary> {
        let (ent_data, _magic_data) = nom_unsigned_four_bytes(data, Endian::Be)?;
        let (ent_data, length) = nom_unsigned_four_bytes(ent_data, Endian::Be)?;

        let preamble_size = 8;
        let (remaining_data, ent_data) = take(length - preamble_size)(ent_data)?;

        let plist_data_results: Result<Dictionary, plist::Error> = plist::from_bytes(ent_data);
        let entitlements = match plist_data_results {
            Ok(results) => results,
            Err(err) => {
                error!("[macho] Failed to parse plist entitlement data: {err:?}");
                Dictionary::new()
            }
        };
        Ok((remaining_data, entitlements))
    }

    /// Parse embedded entitlements (10.15+)
    fn parse_embedded_entitlements(data: &[u8]) -> nom::IResult<&[u8], String> {
        let (ent_data, _magic_data) = nom_unsigned_four_bytes(data, Endian::Be)?;
        let (ent_data, length) = nom_unsigned_four_bytes(ent_data, Endian::Be)?;

        let preamble_size = 8;
        let (_, ent_info) = take(length - preamble_size)(ent_data)?;

        // Can base64 decode and extract with:
        //   openssl asn1parse -inform DER -in <file.raw>
        Ok((ent_data, base64_encode_standard(ent_info)))
    }

    /// Parse the Code Directory data
    fn parse_code_directory(data: &[u8]) -> nom::IResult<&[u8], CodeDirectory> {
        let (dir_data, magic) = nom_unsigned_four_bytes(data, Endian::Be)?;
        let (dir_data, length) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
        let (dir_data, version) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
        let (dir_data, flags) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
        let (dir_data, hash_offset) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
        let (dir_data, ident_offset) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;

        let (dir_data, n_special_slots) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
        let (dir_data, n_code_slots) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
        let (dir_data, code_limit) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;

        let (dir_data, hash_size) = nom_unsigned_one_byte(dir_data, Endian::Be)?;
        let (dir_data, hash_type) = nom_unsigned_one_byte(dir_data, Endian::Be)?;
        let (dir_data, platform) = nom_unsigned_one_byte(dir_data, Endian::Be)?;
        let (dir_data, page_size) = nom_unsigned_one_byte(dir_data, Endian::Be)?;

        let (mut dir_data, _spare2) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;

        // Hash offset starts at index zero (0), however special slots are negative (before zero)
        // Reset the offset to handle the special slots
        let real_offset: u32 = hash_offset - (hash_size as u32 * n_special_slots);
        let (hash_data, _) = take(real_offset)(data)?;
        let (id_data, _) = take(ident_offset)(data)?;
        let (_, id_data) = take_while(|b| b != 0)(id_data)?;

        let (remaining_data, hash_pages) =
            CodeSign::get_page_hashes(hash_data, hash_size, &(n_special_slots + n_code_slots))?;

        let mut code_directory = CodeDirectory {
            id: extract_utf8_string(id_data),
            team_id: String::new(),
            hash_type,
            version,
            flags,
            magic,
            length,
            hash_offset,
            ident_offset,
            n_special_slots,
            n_code_slots,
            code_limit,
            hash_size,
            platform,
            page_size,
            spare2: 0,
            hash_pages,
        };

        let scatter_version = 0x20100;
        let team_version = 0x20200;
        let code_limit64_version = 0x20300;
        let exec_segment_version = 0x20400;
        let pre_encrypt_version = 0x20500;

        // Get extra data depending on version
        if version >= scatter_version {
            let (extra_data, _scatter_data) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
            dir_data = extra_data;
        }
        if version >= team_version {
            let (extra_data, team_offset) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
            dir_data = extra_data;
            let empty = 0;
            if team_offset != empty {
                let (team_data, _) = take(team_offset)(data)?;
                let (_, team_data) = take_while(|b| b != 0)(team_data)?;
                code_directory.team_id = extract_utf8_string(team_data);
            }
        }
        if version >= code_limit64_version {
            let (extra_data, _code_limit64) = nom_unsigned_four_bytes(dir_data, Endian::Be)?;
            dir_data = extra_data;
        }
        if version >= exec_segment_version {
            let (extra_data, _exec_segment_data) = nom_unsigned_eight_bytes(dir_data, Endian::Be)?;
            dir_data = extra_data;
        }
        if version >= pre_encrypt_version {
            let (_extra_data, _pre_encrypt_data) = nom_unsigned_eight_bytes(dir_data, Endian::Be)?;
        }
        Ok((remaining_data, code_directory))
    }

    /// Get page hashes for Code Directory
    fn get_page_hashes<'a>(
        data: &'a [u8],
        hash_size: u8,
        hash_count: &u32,
    ) -> nom::IResult<&'a [u8], Vec<String>> {
        let mut count = 0;
        let mut hashes: Vec<String> = Vec::new();
        let mut page_data = data;
        while &count < hash_count {
            let (remaining_data, hash_data) = take(hash_size)(page_data)?;
            page_data = remaining_data;

            let mut hash = String::new();
            for hash_byte in hash_data {
                hash.push_str(format!("{:02x}", &hash_byte).as_str());
            }

            hashes.push(hash);
            count += 1;
        }

        Ok((page_data, hashes))
    }
}

#[cfg(test)]
mod tests {
    use super::CodeSign;
    use plist::Dictionary;
    use std::{fs, path::PathBuf};

    #[test]
    fn test_parse_codesign() {
        let test_data = [
            250, 222, 12, 192, 0, 0, 20, 39, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 2, 0, 0,
            2, 137, 0, 1, 0, 0, 0, 0, 2, 197, 250, 222, 12, 2, 0, 0, 2, 101, 0, 2, 4, 0, 0, 0, 0,
            0, 0, 0, 0, 165, 0, 0, 0, 88, 0, 0, 0, 2, 0, 0, 0, 14, 0, 0, 211, 64, 32, 2, 13, 12, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 99, 111, 109, 46, 97, 112, 112,
            108, 101, 46, 108, 115, 0, 168, 204, 198, 12, 42, 91, 255, 21, 128, 91, 235, 134, 135,
            198, 168, 153, 219, 56, 109, 150, 74, 94, 179, 207, 60, 137, 87, 83, 246, 135, 156,
            234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 59, 222, 30, 229, 36, 154, 51, 47, 236, 74, 207, 40, 119, 188, 25, 197,
            241, 138, 159, 30, 128, 245, 109, 246, 161, 86, 243, 151, 55, 47, 123, 105, 173, 127,
            172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124,
            180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 173, 127, 172, 178, 88, 111, 198,
            233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218,
            189, 139, 72, 137, 44, 167, 130, 203, 251, 201, 88, 114, 213, 65, 215, 132, 92, 79,
            187, 225, 0, 33, 226, 10, 38, 223, 119, 173, 153, 247, 14, 1, 10, 247, 238, 244, 22,
            202, 169, 160, 168, 247, 162, 128, 155, 72, 116, 18, 163, 210, 147, 157, 146, 118, 156,
            148, 73, 100, 173, 213, 132, 110, 162, 211, 152, 233, 1, 61, 82, 71, 215, 26, 75, 173,
            212, 253, 136, 61, 11, 141, 230, 13, 237, 161, 2, 101, 20, 92, 164, 82, 159, 249, 223,
            136, 99, 23, 165, 203, 244, 94, 215, 231, 173, 204, 154, 239, 4, 204, 41, 106, 77, 138,
            42, 228, 138, 129, 132, 159, 207, 89, 147, 22, 13, 139, 220, 13, 50, 109, 253, 3, 177,
            252, 171, 23, 100, 229, 232, 232, 221, 95, 240, 42, 115, 204, 83, 123, 127, 1, 52, 239,
            11, 131, 220, 160, 249, 78, 238, 32, 158, 173, 2, 134, 72, 187, 166, 166, 114, 96, 127,
            249, 100, 0, 198, 85, 66, 56, 117, 122, 81, 74, 1, 227, 66, 67, 146, 172, 159, 12, 24,
            71, 145, 94, 57, 224, 43, 140, 68, 148, 173, 127, 172, 178, 88, 111, 198, 233, 102,
            192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139,
            72, 137, 44, 167, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209,
            107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 173,
            127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255,
            124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 198, 145, 226, 248, 9, 81,
            168, 158, 43, 91, 219, 135, 137, 37, 8, 91, 128, 67, 225, 176, 6, 219, 212, 194, 237,
            161, 55, 110, 81, 215, 85, 108, 86, 76, 74, 9, 118, 237, 173, 113, 148, 125, 213, 56,
            25, 232, 72, 19, 58, 93, 219, 49, 35, 174, 222, 1, 37, 36, 41, 21, 111, 189, 189, 61,
            250, 222, 12, 1, 0, 0, 0, 60, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 20, 250, 222, 12, 0, 0,
            0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 12, 99, 111, 109, 46, 97, 112,
            112, 108, 101, 46, 108, 115, 0, 0, 0, 3, 250, 222, 11, 1, 0, 0, 17, 98, 48, 128, 6, 9,
            42, 134, 72, 134, 247, 13, 1, 7, 2, 160, 128, 48, 128, 2, 1, 1, 49, 15, 48, 13, 6, 9,
            96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 48, 128, 6, 9, 42, 134, 72, 134, 247, 13, 1, 7,
            1, 0, 0, 160, 130, 13, 137, 48, 130, 4, 14, 48, 130, 2, 246, 160, 3, 2, 1, 2, 2, 1, 33,
            48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 98, 49, 11, 48, 9, 6, 3,
            85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 65, 112, 112, 108,
            101, 32, 73, 110, 99, 46, 49, 38, 48, 36, 6, 3, 85, 4, 11, 19, 29, 65, 112, 112, 108,
            101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117,
            116, 104, 111, 114, 105, 116, 121, 49, 22, 48, 20, 6, 3, 85, 4, 3, 19, 13, 65, 112,
            112, 108, 101, 32, 82, 111, 111, 116, 32, 67, 65, 48, 30, 23, 13, 49, 49, 49, 48, 50,
            52, 49, 55, 51, 57, 52, 49, 90, 23, 13, 50, 54, 49, 48, 50, 52, 49, 55, 51, 57, 52, 49,
            90, 48, 127, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4,
            10, 12, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 38, 48, 36, 6, 3, 85, 4,
            11, 12, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116,
            105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 49, 51, 48, 49, 6, 3,
            85, 4, 3, 12, 42, 65, 112, 112, 108, 101, 32, 67, 111, 100, 101, 32, 83, 105, 103, 110,
            105, 110, 103, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32,
            65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72,
            134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 162,
            168, 17, 113, 255, 14, 249, 11, 107, 248, 37, 13, 152, 129, 93, 107, 89, 189, 90, 27,
            137, 179, 231, 229, 238, 206, 57, 152, 35, 53, 57, 72, 159, 33, 171, 39, 217, 238, 156,
            32, 240, 100, 56, 8, 107, 12, 167, 207, 220, 80, 182, 29, 6, 196, 91, 241, 93, 26, 155,
            84, 101, 134, 115, 47, 98, 229, 56, 189, 1, 16, 100, 114, 109, 124, 105, 71, 97, 156,
            16, 5, 38, 227, 235, 133, 194, 44, 36, 220, 106, 194, 63, 136, 252, 204, 172, 41, 76,
            161, 73, 121, 17, 154, 117, 118, 229, 30, 184, 208, 210, 9, 180, 76, 83, 120, 251, 223,
            24, 118, 161, 143, 164, 169, 50, 202, 145, 167, 182, 250, 151, 189, 57, 170, 205, 27,
            80, 17, 136, 171, 106, 237, 235, 102, 202, 32, 75, 172, 59, 45, 239, 170, 231, 214,
            201, 136, 45, 105, 194, 164, 42, 97, 47, 219, 135, 2, 243, 161, 33, 185, 76, 159, 14,
            248, 249, 217, 45, 202, 114, 4, 127, 29, 174, 110, 250, 63, 136, 179, 204, 163, 64,
            238, 23, 135, 24, 81, 150, 188, 207, 228, 45, 173, 194, 233, 89, 78, 93, 28, 101, 51,
            39, 3, 170, 103, 163, 147, 36, 135, 199, 135, 121, 2, 185, 93, 152, 179, 14, 238, 205,
            105, 8, 62, 140, 72, 146, 36, 178, 109, 215, 48, 190, 207, 216, 228, 200, 167, 151,
            129, 208, 30, 35, 220, 56, 153, 95, 97, 254, 133, 2, 3, 1, 0, 1, 163, 129, 177, 48,
            129, 174, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 134, 48, 19, 6, 3, 85,
            29, 37, 4, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 3, 48, 15, 6, 3, 85, 29, 19, 1, 1,
            255, 4, 5, 48, 3, 1, 1, 255, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 142, 105, 166,
            196, 119, 66, 78, 4, 165, 86, 66, 156, 81, 31, 134, 218, 210, 32, 143, 9, 48, 31, 6, 3,
            85, 29, 35, 4, 24, 48, 22, 128, 20, 43, 208, 105, 71, 148, 118, 9, 254, 244, 107, 141,
            46, 64, 166, 247, 71, 77, 127, 8, 94, 48, 54, 6, 3, 85, 29, 31, 4, 47, 48, 45, 48, 43,
            160, 41, 160, 39, 134, 37, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 112,
            112, 108, 101, 46, 99, 111, 109, 47, 97, 112, 112, 108, 101, 99, 97, 47, 114, 111, 111,
            116, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 130,
            1, 1, 0, 112, 115, 173, 246, 82, 21, 106, 183, 21, 24, 222, 169, 42, 209, 157, 118,
            155, 30, 178, 105, 150, 199, 194, 195, 225, 43, 208, 239, 7, 93, 112, 248, 218, 60, 90,
            72, 71, 219, 57, 108, 128, 202, 115, 222, 98, 27, 183, 58, 202, 163, 90, 30, 227, 135,
            218, 37, 74, 147, 155, 239, 115, 16, 147, 115, 93, 227, 244, 157, 126, 222, 15, 129,
            246, 169, 153, 193, 88, 110, 156, 244, 137, 0, 190, 207, 79, 255, 2, 211, 14, 252, 245,
            243, 244, 114, 26, 50, 177, 202, 39, 14, 222, 168, 211, 153, 143, 106, 230, 153, 251,
            97, 201, 79, 242, 23, 177, 24, 103, 240, 48, 192, 198, 10, 238, 200, 68, 129, 164, 137,
            187, 241, 121, 65, 195, 238, 174, 200, 107, 103, 124, 204, 108, 73, 134, 76, 2, 211,
            211, 106, 110, 24, 156, 248, 92, 56, 200, 48, 135, 154, 48, 218, 103, 40, 184, 226,
            154, 121, 218, 159, 165, 59, 31, 81, 98, 59, 34, 241, 126, 83, 124, 26, 11, 195, 240,
            77, 220, 73, 68, 242, 136, 136, 206, 58, 91, 185, 157, 233, 178, 183, 91, 82, 167, 198,
            213, 88, 137, 114, 183, 216, 204, 179, 168, 24, 29, 80, 151, 63, 29, 218, 106, 174, 56,
            191, 123, 121, 49, 190, 99, 185, 247, 133, 133, 23, 233, 109, 138, 196, 226, 24, 148,
            47, 215, 111, 82, 165, 153, 177, 221, 68, 155, 7, 112, 146, 136, 38, 119, 219, 48, 130,
            4, 180, 48, 130, 3, 156, 160, 3, 2, 1, 2, 2, 8, 100, 239, 234, 254, 194, 57, 232, 165,
            48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 127, 49, 11, 48, 9, 6, 3,
            85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 12, 10, 65, 112, 112, 108,
            101, 32, 73, 110, 99, 46, 49, 38, 48, 36, 6, 3, 85, 4, 11, 12, 29, 65, 112, 112, 108,
            101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117,
            116, 104, 111, 114, 105, 116, 121, 49, 51, 48, 49, 6, 3, 85, 4, 3, 12, 42, 65, 112,
            112, 108, 101, 32, 67, 111, 100, 101, 32, 83, 105, 103, 110, 105, 110, 103, 32, 67,
            101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111,
            114, 105, 116, 121, 48, 30, 23, 13, 50, 48, 49, 48, 50, 57, 49, 56, 51, 50, 51, 56, 90,
            23, 13, 50, 54, 49, 48, 50, 52, 49, 55, 51, 57, 52, 49, 90, 48, 86, 49, 11, 48, 9, 6,
            3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 12, 10, 65, 112, 112, 108,
            101, 32, 73, 110, 99, 46, 49, 23, 48, 21, 6, 3, 85, 4, 11, 12, 14, 65, 112, 112, 108,
            101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 49, 25, 48, 23, 6, 3, 85, 4, 3, 12, 16,
            83, 111, 102, 116, 119, 97, 114, 101, 32, 83, 105, 103, 110, 105, 110, 103, 48, 130, 1,
            34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130,
            1, 10, 2, 130, 1, 1, 0, 191, 48, 184, 116, 152, 79, 174, 6, 11, 164, 148, 110, 49, 84,
            109, 9, 209, 60, 163, 176, 57, 16, 169, 208, 230, 170, 96, 34, 93, 211, 228, 132, 162,
            64, 65, 144, 100, 198, 96, 61, 145, 97, 218, 82, 168, 69, 39, 158, 44, 100, 203, 228,
            30, 168, 36, 10, 82, 58, 179, 211, 236, 22, 65, 120, 193, 158, 209, 6, 230, 120, 37,
            99, 8, 243, 223, 202, 65, 230, 29, 254, 53, 233, 81, 92, 19, 21, 139, 233, 209, 157,
            113, 123, 209, 201, 170, 75, 158, 153, 218, 143, 192, 41, 184, 47, 144, 111, 164, 187,
            101, 143, 128, 106, 215, 61, 104, 109, 228, 120, 194, 165, 18, 47, 248, 50, 233, 126,
            201, 93, 92, 140, 62, 22, 32, 27, 215, 94, 157, 27, 134, 45, 8, 247, 188, 25, 164, 77,
            14, 65, 164, 74, 219, 107, 26, 128, 69, 80, 4, 169, 76, 141, 21, 7, 234, 106, 39, 189,
            187, 136, 158, 60, 63, 178, 82, 57, 151, 227, 183, 200, 235, 84, 82, 152, 138, 47, 35,
            86, 101, 229, 233, 42, 217, 81, 180, 35, 250, 4, 221, 247, 235, 160, 223, 213, 154,
            242, 94, 8, 241, 95, 135, 240, 177, 71, 108, 117, 177, 177, 140, 209, 19, 227, 122,
            193, 236, 98, 65, 116, 166, 131, 52, 241, 249, 90, 116, 100, 57, 63, 89, 110, 207, 44,
            192, 96, 131, 41, 60, 231, 222, 79, 95, 13, 243, 147, 57, 95, 48, 141, 2, 3, 1, 0, 1,
            163, 130, 1, 91, 48, 130, 1, 87, 48, 12, 6, 3, 85, 29, 19, 1, 1, 255, 4, 2, 48, 0, 48,
            31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 142, 105, 166, 196, 119, 66, 78, 4, 165,
            86, 66, 156, 81, 31, 134, 218, 210, 32, 143, 9, 48, 129, 150, 6, 3, 85, 29, 32, 4, 129,
            142, 48, 129, 139, 48, 129, 136, 6, 9, 42, 134, 72, 134, 247, 99, 100, 5, 1, 48, 123,
            48, 121, 6, 8, 43, 6, 1, 5, 5, 7, 2, 2, 48, 109, 12, 107, 84, 104, 105, 115, 32, 99,
            101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 105, 115, 32, 116, 111, 32, 98,
            101, 32, 117, 115, 101, 100, 32, 101, 120, 99, 108, 117, 115, 105, 118, 101, 108, 121,
            32, 102, 111, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 105, 110, 116,
            101, 114, 110, 97, 108, 32, 116, 111, 32, 65, 112, 112, 108, 101, 32, 80, 114, 111,
            100, 117, 99, 116, 115, 32, 97, 110, 100, 47, 111, 114, 32, 65, 112, 112, 108, 101, 32,
            112, 114, 111, 99, 101, 115, 115, 101, 115, 46, 48, 22, 6, 3, 85, 29, 37, 1, 1, 255, 4,
            12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 3, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48,
            42, 160, 40, 160, 38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 97,
            112, 112, 108, 101, 46, 99, 111, 109, 47, 99, 111, 100, 101, 115, 105, 103, 110, 105,
            110, 103, 46, 99, 114, 108, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 198, 237, 62, 74,
            251, 46, 232, 63, 19, 213, 160, 21, 179, 93, 217, 231, 179, 247, 104, 53, 48, 14, 6, 3,
            85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 7, 128, 48, 15, 6, 9, 42, 134, 72, 134, 247, 99,
            100, 6, 22, 4, 2, 5, 0, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 130,
            1, 1, 0, 137, 157, 168, 14, 128, 54, 63, 231, 1, 102, 186, 115, 130, 35, 115, 155, 157,
            171, 203, 90, 94, 194, 48, 79, 144, 37, 96, 154, 73, 49, 4, 9, 82, 54, 184, 198, 110,
            74, 102, 87, 63, 85, 172, 230, 245, 228, 210, 117, 247, 91, 207, 101, 131, 251, 40,
            249, 149, 105, 16, 74, 201, 169, 194, 156, 254, 139, 32, 32, 138, 153, 126, 155, 98,
            65, 154, 159, 166, 135, 186, 72, 246, 113, 176, 149, 140, 36, 2, 8, 63, 62, 185, 22,
            240, 62, 248, 254, 103, 254, 246, 216, 157, 58, 190, 144, 193, 2, 208, 73, 191, 155,
            205, 26, 17, 25, 0, 5, 58, 128, 21, 77, 125, 44, 227, 141, 125, 196, 140, 160, 91, 100,
            176, 206, 16, 111, 92, 53, 185, 94, 22, 79, 203, 242, 29, 78, 215, 163, 218, 211, 125,
            162, 251, 24, 128, 224, 95, 55, 218, 36, 17, 69, 30, 179, 134, 242, 162, 216, 216, 17,
            225, 76, 52, 148, 150, 149, 200, 81, 161, 8, 88, 51, 96, 111, 188, 189, 207, 140, 86,
            51, 117, 72, 18, 228, 230, 107, 77, 152, 235, 84, 49, 53, 240, 57, 72, 107, 192, 207,
            85, 234, 168, 120, 78, 194, 235, 223, 88, 111, 199, 81, 23, 213, 216, 85, 65, 188, 105,
            85, 220, 163, 180, 1, 244, 223, 52, 163, 76, 218, 130, 153, 128, 66, 218, 7, 50, 139,
            55, 187, 202, 225, 231, 220, 239, 53, 161, 114, 86, 209, 48, 130, 4, 187, 48, 130, 3,
            163, 160, 3, 2, 1, 2, 2, 1, 2, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0,
            48, 98, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10,
            19, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 38, 48, 36, 6, 3, 85, 4, 11,
            19, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105,
            111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 49, 22, 48, 20, 6, 3, 85, 4,
            3, 19, 13, 65, 112, 112, 108, 101, 32, 82, 111, 111, 116, 32, 67, 65, 48, 30, 23, 13,
            48, 54, 48, 52, 50, 53, 50, 49, 52, 48, 51, 54, 90, 23, 13, 51, 53, 48, 50, 48, 57, 50,
            49, 52, 48, 51, 54, 90, 48, 98, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19,
            48, 17, 6, 3, 85, 4, 10, 19, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 38,
            48, 36, 6, 3, 85, 4, 11, 19, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114, 116, 105,
            102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121,
            49, 22, 48, 20, 6, 3, 85, 4, 3, 19, 13, 65, 112, 112, 108, 101, 32, 82, 111, 111, 116,
            32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3,
            130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 228, 145, 169, 9, 31, 145, 219, 30, 71,
            80, 235, 5, 237, 94, 121, 132, 45, 235, 54, 162, 87, 76, 85, 236, 139, 25, 137, 222,
            249, 75, 108, 245, 7, 171, 34, 48, 2, 232, 24, 62, 248, 80, 9, 211, 127, 65, 168, 152,
            249, 209, 202, 102, 156, 36, 107, 17, 208, 163, 187, 228, 27, 42, 195, 31, 149, 158,
            122, 12, 164, 71, 139, 91, 212, 22, 55, 51, 203, 196, 15, 77, 206, 20, 105, 209, 201,
            25, 114, 245, 93, 14, 213, 127, 95, 155, 242, 37, 3, 186, 85, 143, 77, 93, 13, 241,
            100, 53, 35, 21, 75, 21, 89, 29, 179, 148, 247, 246, 156, 158, 207, 80, 186, 193, 88,
            80, 103, 143, 8, 180, 32, 247, 203, 172, 44, 32, 111, 112, 182, 63, 1, 48, 140, 183,
            67, 207, 15, 157, 61, 243, 43, 73, 40, 26, 200, 254, 206, 181, 185, 14, 217, 94, 28,
            214, 203, 61, 181, 58, 173, 244, 15, 14, 0, 146, 11, 177, 33, 22, 46, 116, 213, 60, 13,
            219, 98, 22, 171, 163, 113, 146, 71, 83, 85, 193, 175, 47, 65, 179, 248, 251, 227, 112,
            205, 230, 163, 76, 69, 126, 31, 76, 107, 80, 150, 65, 137, 196, 116, 98, 11, 16, 131,
            65, 135, 51, 138, 129, 177, 48, 88, 236, 90, 4, 50, 140, 104, 179, 143, 29, 222, 101,
            115, 255, 103, 94, 101, 188, 73, 216, 118, 159, 51, 20, 101, 161, 119, 148, 201, 45, 2,
            3, 1, 0, 1, 163, 130, 1, 122, 48, 130, 1, 118, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4,
            4, 3, 2, 1, 6, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 29, 6,
            3, 85, 29, 14, 4, 22, 4, 20, 43, 208, 105, 71, 148, 118, 9, 254, 244, 107, 141, 46, 64,
            166, 247, 71, 77, 127, 8, 94, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 43,
            208, 105, 71, 148, 118, 9, 254, 244, 107, 141, 46, 64, 166, 247, 71, 77, 127, 8, 94,
            48, 130, 1, 17, 6, 3, 85, 29, 32, 4, 130, 1, 8, 48, 130, 1, 4, 48, 130, 1, 0, 6, 9, 42,
            134, 72, 134, 247, 99, 100, 5, 1, 48, 129, 242, 48, 42, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1,
            22, 30, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 97, 112, 112, 108, 101,
            46, 99, 111, 109, 47, 97, 112, 112, 108, 101, 99, 97, 47, 48, 129, 195, 6, 8, 43, 6, 1,
            5, 5, 7, 2, 2, 48, 129, 182, 26, 129, 179, 82, 101, 108, 105, 97, 110, 99, 101, 32,
            111, 110, 32, 116, 104, 105, 115, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116,
            101, 32, 98, 121, 32, 97, 110, 121, 32, 112, 97, 114, 116, 121, 32, 97, 115, 115, 117,
            109, 101, 115, 32, 97, 99, 99, 101, 112, 116, 97, 110, 99, 101, 32, 111, 102, 32, 116,
            104, 101, 32, 116, 104, 101, 110, 32, 97, 112, 112, 108, 105, 99, 97, 98, 108, 101, 32,
            115, 116, 97, 110, 100, 97, 114, 100, 32, 116, 101, 114, 109, 115, 32, 97, 110, 100,
            32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 111, 102, 32, 117, 115, 101,
            44, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 112, 111, 108, 105, 99,
            121, 32, 97, 110, 100, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111,
            110, 32, 112, 114, 97, 99, 116, 105, 99, 101, 32, 115, 116, 97, 116, 101, 109, 101,
            110, 116, 115, 46, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 130, 1,
            1, 0, 92, 54, 153, 76, 45, 120, 183, 237, 140, 155, 220, 243, 119, 155, 242, 118, 210,
            119, 48, 79, 193, 31, 133, 131, 133, 27, 153, 61, 71, 55, 242, 169, 155, 64, 142, 44,
            212, 177, 144, 18, 216, 190, 244, 115, 155, 238, 210, 100, 15, 203, 121, 79, 52, 216,
            162, 62, 249, 120, 255, 107, 200, 7, 236, 125, 57, 131, 139, 83, 32, 211, 56, 196, 177,
            191, 154, 79, 10, 107, 255, 43, 252, 89, 167, 5, 9, 124, 23, 64, 86, 17, 30, 116, 211,
            183, 139, 35, 59, 71, 163, 213, 111, 36, 226, 235, 209, 183, 112, 223, 15, 69, 225, 39,
            202, 241, 109, 120, 237, 231, 181, 23, 23, 168, 220, 126, 34, 53, 202, 37, 213, 217,
            15, 214, 107, 212, 162, 36, 35, 17, 247, 161, 172, 143, 115, 129, 96, 198, 27, 91, 9,
            47, 146, 178, 248, 68, 72, 240, 96, 56, 158, 21, 245, 61, 38, 103, 32, 138, 51, 106,
            247, 13, 130, 207, 222, 235, 163, 47, 249, 83, 106, 91, 100, 192, 99, 51, 119, 247, 58,
            7, 44, 86, 235, 218, 15, 33, 14, 218, 186, 115, 25, 79, 181, 217, 54, 127, 193, 135,
            85, 217, 167, 153, 185, 50, 66, 251, 216, 213, 113, 158, 126, 161, 82, 183, 27, 189,
            147, 66, 36, 18, 42, 199, 15, 29, 182, 77, 156, 94, 99, 200, 75, 128, 23, 80, 170, 138,
            213, 218, 228, 252, 208, 9, 7, 55, 176, 117, 117, 33, 49, 130, 3, 143, 48, 130, 3, 139,
            2, 1, 1, 48, 129, 139, 48, 127, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19,
            48, 17, 6, 3, 85, 4, 10, 12, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 38,
            48, 36, 6, 3, 85, 4, 11, 12, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114, 116, 105,
            102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121,
            49, 51, 48, 49, 6, 3, 85, 4, 3, 12, 42, 65, 112, 112, 108, 101, 32, 67, 111, 100, 101,
            32, 83, 105, 103, 110, 105, 110, 103, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97,
            116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 2, 8, 100, 239,
            234, 254, 194, 57, 232, 165, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 160,
            130, 1, 212, 48, 24, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 3, 49, 11, 6, 9, 42, 134,
            72, 134, 247, 13, 1, 7, 1, 48, 28, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 5, 49, 15,
            23, 13, 50, 50, 48, 50, 49, 50, 48, 57, 51, 53, 52, 48, 90, 48, 47, 6, 9, 42, 134, 72,
            134, 247, 13, 1, 9, 4, 49, 34, 4, 32, 19, 58, 56, 219, 35, 128, 73, 83, 222, 155, 168,
            165, 21, 22, 81, 191, 156, 103, 86, 165, 144, 152, 184, 226, 192, 181, 148, 91, 80,
            253, 131, 130, 48, 60, 6, 9, 42, 134, 72, 134, 247, 99, 100, 9, 2, 49, 47, 48, 45, 6,
            9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 4, 32, 19, 58, 56, 219, 35, 128, 73, 83, 222, 155,
            168, 165, 21, 22, 81, 191, 156, 103, 86, 165, 144, 152, 184, 226, 192, 181, 148, 91,
            80, 253, 131, 130, 48, 130, 1, 41, 6, 9, 42, 134, 72, 134, 247, 99, 100, 9, 1, 49, 130,
            1, 26, 4, 130, 1, 22, 60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61,
            34, 49, 46, 48, 34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34, 85, 84, 70, 45,
            56, 34, 63, 62, 10, 60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 112, 108, 105, 115, 116,
            32, 80, 85, 66, 76, 73, 67, 32, 34, 45, 47, 47, 65, 112, 112, 108, 101, 47, 47, 68, 84,
            68, 32, 80, 76, 73, 83, 84, 32, 49, 46, 48, 47, 47, 69, 78, 34, 32, 34, 104, 116, 116,
            112, 58, 47, 47, 119, 119, 119, 46, 97, 112, 112, 108, 101, 46, 99, 111, 109, 47, 68,
            84, 68, 115, 47, 80, 114, 111, 112, 101, 114, 116, 121, 76, 105, 115, 116, 45, 49, 46,
            48, 46, 100, 116, 100, 34, 62, 10, 60, 112, 108, 105, 115, 116, 32, 118, 101, 114, 115,
            105, 111, 110, 61, 34, 49, 46, 48, 34, 62, 10, 60, 100, 105, 99, 116, 62, 10, 9, 60,
            107, 101, 121, 62, 99, 100, 104, 97, 115, 104, 101, 115, 60, 47, 107, 101, 121, 62, 10,
            9, 60, 97, 114, 114, 97, 121, 62, 10, 9, 9, 60, 100, 97, 116, 97, 62, 10, 9, 9, 69,
            122, 111, 52, 50, 121, 79, 65, 83, 86, 80, 101, 109, 54, 105, 108, 70, 82, 90, 82, 118,
            53, 120, 110, 86, 113, 85, 61, 10, 9, 9, 60, 47, 100, 97, 116, 97, 62, 10, 9, 60, 47,
            97, 114, 114, 97, 121, 62, 10, 60, 47, 100, 105, 99, 116, 62, 10, 60, 47, 112, 108,
            105, 115, 116, 62, 10, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 4, 130,
            1, 0, 157, 82, 5, 203, 171, 157, 222, 218, 86, 111, 200, 134, 43, 158, 168, 112, 180,
            239, 83, 172, 231, 118, 207, 157, 236, 165, 251, 103, 109, 78, 42, 23, 167, 43, 159,
            66, 165, 254, 35, 89, 65, 61, 106, 58, 155, 76, 156, 185, 101, 74, 56, 210, 205, 107,
            11, 132, 201, 108, 251, 142, 112, 226, 242, 18, 148, 153, 105, 195, 101, 178, 37, 203,
            206, 240, 82, 161, 128, 184, 158, 105, 240, 67, 52, 190, 170, 95, 96, 212, 44, 29, 194,
            202, 33, 246, 61, 17, 217, 68, 237, 30, 216, 54, 127, 167, 254, 186, 13, 190, 214, 8,
            180, 240, 31, 162, 102, 11, 152, 20, 12, 208, 78, 195, 73, 178, 21, 121, 148, 205, 111,
            235, 105, 214, 7, 25, 219, 235, 233, 249, 170, 252, 77, 70, 12, 65, 169, 189, 234, 132,
            196, 92, 181, 122, 10, 218, 181, 140, 247, 212, 149, 190, 95, 194, 218, 150, 62, 108,
            77, 22, 4, 144, 94, 179, 225, 124, 27, 140, 211, 20, 64, 23, 254, 2, 133, 65, 64, 159,
            77, 151, 117, 0, 8, 119, 126, 174, 50, 124, 198, 27, 166, 124, 18, 96, 77, 221, 96, 60,
            218, 20, 242, 184, 209, 58, 68, 24, 161, 84, 56, 27, 100, 225, 27, 138, 95, 80, 118,
            168, 34, 127, 175, 172, 10, 135, 157, 4, 33, 85, 165, 188, 204, 26, 227, 172, 8, 20,
            216, 166, 140, 82, 10, 182, 54, 146, 244, 199, 199, 222, 0, 0, 0, 0, 0, 0,
        ];

        let (_, results) = CodeSign::parse_codesign(&test_data).unwrap();
        assert_eq!(results.certs.len(), 5924);
        assert_eq!(results.directory.id, "com.apple.ls");
        assert_eq!(results.directory.team_id, "");
        assert_eq!(results.directory.flags, 0);
        assert_eq!(results.directory.length, 613);
        assert_eq!(results.directory.version, 132096);
        assert_eq!(results.directory.hash_offset, 165);
        assert_eq!(results.directory.ident_offset, 88);
        assert_eq!(results.directory.n_special_slots, 2);
        assert_eq!(results.directory.n_code_slots, 14);
        assert_eq!(results.directory.code_limit, 54080);
        assert_eq!(results.directory.hash_size, 32);
        assert_eq!(results.directory.hash_type, 2);
        assert_eq!(results.directory.platform, 13);
        assert_eq!(results.directory.page_size, 12);
        assert_eq!(results.directory.spare2, 0);
        assert_eq!(
            results.directory.hash_pages,
            [
                "a8ccc60c2a5bff15805beb8687c6a899db386d964a5eb3cf3c895753f6879cea",
                "0000000000000000000000000000000000000000000000000000000000000000",
                "3bde1ee5249a332fec4acf2877bc19c5f18a9f1e80f56df6a156f397372f7b69",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "82cbfbc95872d541d7845c4fbbe10021e20a26df77ad99f70e010af7eef416ca",
                "a9a0a8f7a2809b487412a3d2939d92769c944964add5846ea2d398e9013d5247",
                "d71a4badd4fd883d0b8de60deda10265145ca4529ff9df886317a5cbf45ed7e7",
                "adcc9aef04cc296a4d8a2ae48a81849fcf5993160d8bdc0d326dfd03b1fcab17",
                "64e5e8e8dd5ff02a73cc537b7f0134ef0b83dca0f94eee209ead028648bba6a6",
                "72607ff96400c6554238757a514a01e3424392ac9f0c1847915e39e02b8c4494",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "c691e2f80951a89e2b5bdb878925085b8043e1b006dbd4c2eda1376e51d7556c",
                "564c4a0976edad71947dd53819e848133a5ddb3123aede01252429156fbdbd3d"
            ]
        );

        assert_eq!(results.entitlements, Dictionary::new());
    }

    #[test]
    fn test_parse_requirements() {
        let test_data = vec![
            250, 222, 12, 1, 0, 0, 0, 60, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 20,
        ];
        let (_, results) = CodeSign::parse_requirements(&test_data).unwrap();
        assert_eq!(results.magic, 0xfade0c01);
        assert_eq!(results.unknown, 60);
        assert_eq!(results.unknown2, 1);
        assert_eq!(results.unknown3, 3);
        assert_eq!(results.size, 20);
    }
    #[test]
    fn test_parse_embedded_entitlements() {
        let test_data = vec![
            250, 222, 113, 114, 0, 0, 1, 112, 112, 130, 1, 100, 2, 1, 1, 176, 130, 1, 93, 48, 73,
            12, 32, 99, 111, 109, 46, 97, 112, 112, 108, 101, 46, 97, 112, 112, 108, 105, 99, 97,
            116, 105, 111, 110, 45, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 12, 37, 86,
            66, 71, 57, 55, 85, 66, 52, 84, 65, 46, 99, 111, 109, 46, 111, 98, 106, 101, 99, 116,
            105, 118, 101, 45, 115, 101, 101, 46, 108, 117, 108, 117, 46, 97, 112, 112, 48, 92, 12,
            47, 99, 111, 109, 46, 97, 112, 112, 108, 101, 46, 100, 101, 118, 101, 108, 111, 112,
            101, 114, 46, 110, 101, 116, 119, 111, 114, 107, 105, 110, 103, 46, 110, 101, 116, 119,
            111, 114, 107, 101, 120, 116, 101, 110, 115, 105, 111, 110, 48, 41, 12, 39, 99, 111,
            110, 116, 101, 110, 116, 45, 102, 105, 108, 116, 101, 114, 45, 112, 114, 111, 118, 105,
            100, 101, 114, 45, 115, 121, 115, 116, 101, 109, 101, 120, 116, 101, 110, 115, 105,
            111, 110, 48, 49, 12, 44, 99, 111, 109, 46, 97, 112, 112, 108, 101, 46, 100, 101, 118,
            101, 108, 111, 112, 101, 114, 46, 115, 121, 115, 116, 101, 109, 45, 101, 120, 116, 101,
            110, 115, 105, 111, 110, 46, 105, 110, 115, 116, 97, 108, 108, 1, 1, 255, 48, 49, 12,
            35, 99, 111, 109, 46, 97, 112, 112, 108, 101, 46, 100, 101, 118, 101, 108, 111, 112,
            101, 114, 46, 116, 101, 97, 109, 45, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114,
            12, 10, 86, 66, 71, 57, 55, 85, 66, 52, 84, 65, 48, 76, 12, 37, 99, 111, 109, 46, 97,
            112, 112, 108, 101, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 97, 112, 112, 108,
            105, 99, 97, 116, 105, 111, 110, 45, 103, 114, 111, 117, 112, 115, 48, 35, 12, 33, 86,
            66, 71, 57, 55, 85, 66, 52, 84, 65, 46, 99, 111, 109, 46, 111, 98, 106, 101, 99, 116,
            105, 118, 101, 45, 115, 101, 101, 46, 108, 117, 108, 117,
        ];
        let (_, results) = CodeSign::parse_embedded_entitlements(&test_data).unwrap();
        assert_eq!(results.len(), 480);
    }

    #[test]
    fn test_parse_codesign_app() {
        let mut test_location = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
        test_location.push("tests/test_data/macos/macho/codesign.raw");
        let buffer = fs::read(test_location).unwrap();

        let (_, results) = CodeSign::parse_codesign(&buffer).unwrap();
        assert_eq!(results.certs.len(), 12012);
        assert_eq!(results.directory.id, "com.objective-see.filemonitor");
        assert_eq!(results.directory.team_id, "VBG97UB4TA");
        assert_eq!(results.directory.flags, 65536);
        assert_eq!(results.directory.magic, 4208856066);
        assert_eq!(results.directory.length, 1065);
        assert_eq!(results.directory.version, 132352);
        assert_eq!(results.directory.hash_offset, 361);
        assert_eq!(results.directory.ident_offset, 96);
        assert_eq!(results.directory.n_special_slots, 7);
        assert_eq!(results.directory.n_code_slots, 22);
        assert_eq!(results.directory.code_limit, 88880);
        assert_eq!(results.directory.hash_size, 32);
        assert_eq!(results.directory.hash_type, 2);
        assert_eq!(results.directory.platform, 0);
        assert_eq!(results.directory.page_size, 12);
        let mut dict = Dictionary::new();

        dict.insert(
            String::from("com.apple.application-identifier"),
            plist::Value::String(String::from("VBG97UB4TA.com.objective-see.filemonitor")),
        );
        dict.insert(
            String::from("com.apple.developer.endpoint-security.client"),
            plist::Value::Boolean(true),
        );
        dict.insert(
            String::from("com.apple.developer.team-identifier"),
            plist::Value::String(String::from("VBG97UB4TA")),
        );

        assert_eq!(results.entitlements, dict);

        assert_eq!(
            results.directory.hash_pages,
            [
                "2172d7cfa73373684bbc9c5fec1d6487647ebc7dcf1d2f8eb22bc0538c596e4c",
                "0000000000000000000000000000000000000000000000000000000000000000",
                "7e76c5513ef9bbc2c1c8ebbaebe25b60673ed11a5f05ba2de7b0068183dad6c1",
                "0000000000000000000000000000000000000000000000000000000000000000",
                "fd398f58a2bdfa2d16551090518be2bf066782dea1532f519768c2789568f759",
                "d42b1773a41a803fa38ad2b6408f1ca26c207272e35a166af7428d590a91f355",
                "52f5bc424bdd07aaaba9385ea54df4179fb2b651d127a9ac1736216d55eec3dd",
                "9ef9144cbaeeab1240757ce19dccb01358ca860030b22052fbeb238b4b1073cf",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "d09ea365f6169d7ff6f9224d61482ef243bb1808eccfb17693e0e996a6251d48",
                "68a766692b8c6a8cf4bf495353afc2650274621cba69936b3f67fc53d46393f8",
                "4ddec94a75e5a96d103dfb69bc477f6807960e60d988f5be555890743b1b1acf",
                "24216bac4cd9d642f2b6fa4da5ba9c7c961e4ce344f2cf15b3b013623b4d59ae",
                "4eeb492c32aafbaf96f62689675c70f7aa02c08cab8061b863446ab49cc0bd18",
                "5243c3d2ededd91350d3eb4b41bed31d3b626cabb70faa6f3e83d12e2cf68add",
                "b7cd3469b110aef7b6f5247193d3b275793aafa20b8c77246e47cfd3a0b94531",
                "9c4a1de0d4ae115e338e39b4588a71740ed6ff6d2dec2687623192ca2b6fc7db",
                "87c40490d6ed35427b277743dca7122ca0b5dd6bd3fe6bd22c1bbf1b2736e074",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "2e5f12c983527984e35173f7dc3c1bfe85d6d98b724a092b93263f8d156f276b",
                "cd6bae06f7c7328ba01e1055b9d78f207e74aeea222b901d9bb68ff1899c7866",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "6fe7caa08be1fb6b70eb4b0762f6e45443a055ba7b1ff1faf651fe7051b04341",
                "84426c03ecafe542aaaff7cfdefc3b73b27b6fa7727ab5dfb7a2275602e62df9"
            ]
        );
    }

    #[test]
    fn test_parse_code_directory() {
        let test_data = [
            250, 222, 12, 2, 0, 0, 2, 101, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 88, 0, 0,
            0, 2, 0, 0, 0, 14, 0, 0, 211, 64, 32, 2, 13, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 99, 111, 109, 46, 97, 112, 112, 108, 101, 46, 108, 115, 0, 168,
            204, 198, 12, 42, 91, 255, 21, 128, 91, 235, 134, 135, 198, 168, 153, 219, 56, 109,
            150, 74, 94, 179, 207, 60, 137, 87, 83, 246, 135, 156, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 222, 30, 229,
            36, 154, 51, 47, 236, 74, 207, 40, 119, 188, 25, 197, 241, 138, 159, 30, 128, 245, 109,
            246, 161, 86, 243, 151, 55, 47, 123, 105, 173, 127, 172, 178, 88, 111, 198, 233, 102,
            192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139,
            72, 137, 44, 167, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209,
            107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 130,
            203, 251, 201, 88, 114, 213, 65, 215, 132, 92, 79, 187, 225, 0, 33, 226, 10, 38, 223,
            119, 173, 153, 247, 14, 1, 10, 247, 238, 244, 22, 202, 169, 160, 168, 247, 162, 128,
            155, 72, 116, 18, 163, 210, 147, 157, 146, 118, 156, 148, 73, 100, 173, 213, 132, 110,
            162, 211, 152, 233, 1, 61, 82, 71, 215, 26, 75, 173, 212, 253, 136, 61, 11, 141, 230,
            13, 237, 161, 2, 101, 20, 92, 164, 82, 159, 249, 223, 136, 99, 23, 165, 203, 244, 94,
            215, 231, 173, 204, 154, 239, 4, 204, 41, 106, 77, 138, 42, 228, 138, 129, 132, 159,
            207, 89, 147, 22, 13, 139, 220, 13, 50, 109, 253, 3, 177, 252, 171, 23, 100, 229, 232,
            232, 221, 95, 240, 42, 115, 204, 83, 123, 127, 1, 52, 239, 11, 131, 220, 160, 249, 78,
            238, 32, 158, 173, 2, 134, 72, 187, 166, 166, 114, 96, 127, 249, 100, 0, 198, 85, 66,
            56, 117, 122, 81, 74, 1, 227, 66, 67, 146, 172, 159, 12, 24, 71, 145, 94, 57, 224, 43,
            140, 68, 148, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107,
            2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 173, 127,
            172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124,
            180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 173, 127, 172, 178, 88, 111, 198,
            233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218,
            189, 139, 72, 137, 44, 167, 198, 145, 226, 248, 9, 81, 168, 158, 43, 91, 219, 135, 137,
            37, 8, 91, 128, 67, 225, 176, 6, 219, 212, 194, 237, 161, 55, 110, 81, 215, 85, 108,
            86, 76, 74, 9, 118, 237, 173, 113, 148, 125, 213, 56, 25, 232, 72, 19, 58, 93, 219, 49,
            35, 174, 222, 1, 37, 36, 41, 21, 111, 189, 189, 61,
        ];

        let (_, results) = CodeSign::parse_code_directory(&test_data).unwrap();
        assert_eq!(results.magic, 0xfade0c02);
        assert_eq!(results.id, "com.apple.ls");
        assert_eq!(results.team_id, "");
        assert_eq!(results.flags, 0);
        assert_eq!(results.length, 613);
        assert_eq!(results.version, 132096);
        assert_eq!(results.hash_offset, 165);
        assert_eq!(results.ident_offset, 88);
        assert_eq!(results.n_special_slots, 2);
        assert_eq!(results.n_code_slots, 14);
        assert_eq!(results.code_limit, 54080);
        assert_eq!(results.hash_size, 32);
        assert_eq!(results.hash_type, 2);
        assert_eq!(results.platform, 13);
        assert_eq!(results.page_size, 12);
        assert_eq!(results.spare2, 0);
        assert_eq!(
            results.hash_pages,
            [
                "a8ccc60c2a5bff15805beb8687c6a899db386d964a5eb3cf3c895753f6879cea",
                "0000000000000000000000000000000000000000000000000000000000000000",
                "3bde1ee5249a332fec4acf2877bc19c5f18a9f1e80f56df6a156f397372f7b69",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "82cbfbc95872d541d7845c4fbbe10021e20a26df77ad99f70e010af7eef416ca",
                "a9a0a8f7a2809b487412a3d2939d92769c944964add5846ea2d398e9013d5247",
                "d71a4badd4fd883d0b8de60deda10265145ca4529ff9df886317a5cbf45ed7e7",
                "adcc9aef04cc296a4d8a2ae48a81849fcf5993160d8bdc0d326dfd03b1fcab17",
                "64e5e8e8dd5ff02a73cc537b7f0134ef0b83dca0f94eee209ead028648bba6a6",
                "72607ff96400c6554238757a514a01e3424392ac9f0c1847915e39e02b8c4494",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "c691e2f80951a89e2b5bdb878925085b8043e1b006dbd4c2eda1376e51d7556c",
                "564c4a0976edad71947dd53819e848133a5ddb3123aede01252429156fbdbd3d"
            ]
        );
    }

    #[test]
    fn test_parse_certs() {
        let test_data = [
            250, 222, 11, 1, 0, 0, 17, 98, 48, 128, 6, 9, 42, 134, 72, 134, 247, 13, 1, 7, 2, 160,
            128, 48, 128, 2, 1, 1, 49, 15, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 48,
            128, 6, 9, 42, 134, 72, 134, 247, 13, 1, 7, 1, 0, 0, 160, 130, 13, 137, 48, 130, 4, 14,
            48, 130, 2, 246, 160, 3, 2, 1, 2, 2, 1, 33, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,
            1, 5, 5, 0, 48, 98, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,
            85, 4, 10, 19, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 38, 48, 36, 6, 3,
            85, 4, 11, 19, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99,
            97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 49, 22, 48, 20,
            6, 3, 85, 4, 3, 19, 13, 65, 112, 112, 108, 101, 32, 82, 111, 111, 116, 32, 67, 65, 48,
            30, 23, 13, 49, 49, 49, 48, 50, 52, 49, 55, 51, 57, 52, 49, 90, 23, 13, 50, 54, 49, 48,
            50, 52, 49, 55, 51, 57, 52, 49, 90, 48, 127, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85,
            83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 12, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99,
            46, 49, 38, 48, 36, 6, 3, 85, 4, 11, 12, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114,
            116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105,
            116, 121, 49, 51, 48, 49, 6, 3, 85, 4, 3, 12, 42, 65, 112, 112, 108, 101, 32, 67, 111,
            100, 101, 32, 83, 105, 103, 110, 105, 110, 103, 32, 67, 101, 114, 116, 105, 102, 105,
            99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 130, 1,
            34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130,
            1, 10, 2, 130, 1, 1, 0, 162, 168, 17, 113, 255, 14, 249, 11, 107, 248, 37, 13, 152,
            129, 93, 107, 89, 189, 90, 27, 137, 179, 231, 229, 238, 206, 57, 152, 35, 53, 57, 72,
            159, 33, 171, 39, 217, 238, 156, 32, 240, 100, 56, 8, 107, 12, 167, 207, 220, 80, 182,
            29, 6, 196, 91, 241, 93, 26, 155, 84, 101, 134, 115, 47, 98, 229, 56, 189, 1, 16, 100,
            114, 109, 124, 105, 71, 97, 156, 16, 5, 38, 227, 235, 133, 194, 44, 36, 220, 106, 194,
            63, 136, 252, 204, 172, 41, 76, 161, 73, 121, 17, 154, 117, 118, 229, 30, 184, 208,
            210, 9, 180, 76, 83, 120, 251, 223, 24, 118, 161, 143, 164, 169, 50, 202, 145, 167,
            182, 250, 151, 189, 57, 170, 205, 27, 80, 17, 136, 171, 106, 237, 235, 102, 202, 32,
            75, 172, 59, 45, 239, 170, 231, 214, 201, 136, 45, 105, 194, 164, 42, 97, 47, 219, 135,
            2, 243, 161, 33, 185, 76, 159, 14, 248, 249, 217, 45, 202, 114, 4, 127, 29, 174, 110,
            250, 63, 136, 179, 204, 163, 64, 238, 23, 135, 24, 81, 150, 188, 207, 228, 45, 173,
            194, 233, 89, 78, 93, 28, 101, 51, 39, 3, 170, 103, 163, 147, 36, 135, 199, 135, 121,
            2, 185, 93, 152, 179, 14, 238, 205, 105, 8, 62, 140, 72, 146, 36, 178, 109, 215, 48,
            190, 207, 216, 228, 200, 167, 151, 129, 208, 30, 35, 220, 56, 153, 95, 97, 254, 133, 2,
            3, 1, 0, 1, 163, 129, 177, 48, 129, 174, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3,
            2, 1, 134, 48, 19, 6, 3, 85, 29, 37, 4, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 3, 48,
            15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 29, 6, 3, 85, 29, 14, 4,
            22, 4, 20, 142, 105, 166, 196, 119, 66, 78, 4, 165, 86, 66, 156, 81, 31, 134, 218, 210,
            32, 143, 9, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 43, 208, 105, 71, 148,
            118, 9, 254, 244, 107, 141, 46, 64, 166, 247, 71, 77, 127, 8, 94, 48, 54, 6, 3, 85, 29,
            31, 4, 47, 48, 45, 48, 43, 160, 41, 160, 39, 134, 37, 104, 116, 116, 112, 58, 47, 47,
            119, 119, 119, 46, 97, 112, 112, 108, 101, 46, 99, 111, 109, 47, 97, 112, 112, 108,
            101, 99, 97, 47, 114, 111, 111, 116, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,
            247, 13, 1, 1, 5, 5, 0, 3, 130, 1, 1, 0, 112, 115, 173, 246, 82, 21, 106, 183, 21, 24,
            222, 169, 42, 209, 157, 118, 155, 30, 178, 105, 150, 199, 194, 195, 225, 43, 208, 239,
            7, 93, 112, 248, 218, 60, 90, 72, 71, 219, 57, 108, 128, 202, 115, 222, 98, 27, 183,
            58, 202, 163, 90, 30, 227, 135, 218, 37, 74, 147, 155, 239, 115, 16, 147, 115, 93, 227,
            244, 157, 126, 222, 15, 129, 246, 169, 153, 193, 88, 110, 156, 244, 137, 0, 190, 207,
            79, 255, 2, 211, 14, 252, 245, 243, 244, 114, 26, 50, 177, 202, 39, 14, 222, 168, 211,
            153, 143, 106, 230, 153, 251, 97, 201, 79, 242, 23, 177, 24, 103, 240, 48, 192, 198,
            10, 238, 200, 68, 129, 164, 137, 187, 241, 121, 65, 195, 238, 174, 200, 107, 103, 124,
            204, 108, 73, 134, 76, 2, 211, 211, 106, 110, 24, 156, 248, 92, 56, 200, 48, 135, 154,
            48, 218, 103, 40, 184, 226, 154, 121, 218, 159, 165, 59, 31, 81, 98, 59, 34, 241, 126,
            83, 124, 26, 11, 195, 240, 77, 220, 73, 68, 242, 136, 136, 206, 58, 91, 185, 157, 233,
            178, 183, 91, 82, 167, 198, 213, 88, 137, 114, 183, 216, 204, 179, 168, 24, 29, 80,
            151, 63, 29, 218, 106, 174, 56, 191, 123, 121, 49, 190, 99, 185, 247, 133, 133, 23,
            233, 109, 138, 196, 226, 24, 148, 47, 215, 111, 82, 165, 153, 177, 221, 68, 155, 7,
            112, 146, 136, 38, 119, 219, 48, 130, 4, 180, 48, 130, 3, 156, 160, 3, 2, 1, 2, 2, 8,
            100, 239, 234, 254, 194, 57, 232, 165, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1,
            5, 5, 0, 48, 127, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,
            85, 4, 10, 12, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 38, 48, 36, 6, 3,
            85, 4, 11, 12, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99,
            97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 49, 51, 48, 49,
            6, 3, 85, 4, 3, 12, 42, 65, 112, 112, 108, 101, 32, 67, 111, 100, 101, 32, 83, 105,
            103, 110, 105, 110, 103, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111,
            110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30, 23, 13, 50, 48, 49, 48,
            50, 57, 49, 56, 51, 50, 51, 56, 90, 23, 13, 50, 54, 49, 48, 50, 52, 49, 55, 51, 57, 52,
            49, 90, 48, 86, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85,
            4, 10, 12, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 23, 48, 21, 6, 3, 85,
            4, 11, 12, 14, 65, 112, 112, 108, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 49,
            25, 48, 23, 6, 3, 85, 4, 3, 12, 16, 83, 111, 102, 116, 119, 97, 114, 101, 32, 83, 105,
            103, 110, 105, 110, 103, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1,
            1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 191, 48, 184, 116, 152, 79,
            174, 6, 11, 164, 148, 110, 49, 84, 109, 9, 209, 60, 163, 176, 57, 16, 169, 208, 230,
            170, 96, 34, 93, 211, 228, 132, 162, 64, 65, 144, 100, 198, 96, 61, 145, 97, 218, 82,
            168, 69, 39, 158, 44, 100, 203, 228, 30, 168, 36, 10, 82, 58, 179, 211, 236, 22, 65,
            120, 193, 158, 209, 6, 230, 120, 37, 99, 8, 243, 223, 202, 65, 230, 29, 254, 53, 233,
            81, 92, 19, 21, 139, 233, 209, 157, 113, 123, 209, 201, 170, 75, 158, 153, 218, 143,
            192, 41, 184, 47, 144, 111, 164, 187, 101, 143, 128, 106, 215, 61, 104, 109, 228, 120,
            194, 165, 18, 47, 248, 50, 233, 126, 201, 93, 92, 140, 62, 22, 32, 27, 215, 94, 157,
            27, 134, 45, 8, 247, 188, 25, 164, 77, 14, 65, 164, 74, 219, 107, 26, 128, 69, 80, 4,
            169, 76, 141, 21, 7, 234, 106, 39, 189, 187, 136, 158, 60, 63, 178, 82, 57, 151, 227,
            183, 200, 235, 84, 82, 152, 138, 47, 35, 86, 101, 229, 233, 42, 217, 81, 180, 35, 250,
            4, 221, 247, 235, 160, 223, 213, 154, 242, 94, 8, 241, 95, 135, 240, 177, 71, 108, 117,
            177, 177, 140, 209, 19, 227, 122, 193, 236, 98, 65, 116, 166, 131, 52, 241, 249, 90,
            116, 100, 57, 63, 89, 110, 207, 44, 192, 96, 131, 41, 60, 231, 222, 79, 95, 13, 243,
            147, 57, 95, 48, 141, 2, 3, 1, 0, 1, 163, 130, 1, 91, 48, 130, 1, 87, 48, 12, 6, 3, 85,
            29, 19, 1, 1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 142,
            105, 166, 196, 119, 66, 78, 4, 165, 86, 66, 156, 81, 31, 134, 218, 210, 32, 143, 9, 48,
            129, 150, 6, 3, 85, 29, 32, 4, 129, 142, 48, 129, 139, 48, 129, 136, 6, 9, 42, 134, 72,
            134, 247, 99, 100, 5, 1, 48, 123, 48, 121, 6, 8, 43, 6, 1, 5, 5, 7, 2, 2, 48, 109, 12,
            107, 84, 104, 105, 115, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32,
            105, 115, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 101, 120, 99, 108,
            117, 115, 105, 118, 101, 108, 121, 32, 102, 111, 114, 32, 102, 117, 110, 99, 116, 105,
            111, 110, 115, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 116, 111, 32, 65, 112,
            112, 108, 101, 32, 80, 114, 111, 100, 117, 99, 116, 115, 32, 97, 110, 100, 47, 111,
            114, 32, 65, 112, 112, 108, 101, 32, 112, 114, 111, 99, 101, 115, 115, 101, 115, 46,
            48, 22, 6, 3, 85, 29, 37, 1, 1, 255, 4, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 3, 48,
            53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160, 38, 134, 36, 104, 116, 116,
            112, 58, 47, 47, 99, 114, 108, 46, 97, 112, 112, 108, 101, 46, 99, 111, 109, 47, 99,
            111, 100, 101, 115, 105, 103, 110, 105, 110, 103, 46, 99, 114, 108, 48, 29, 6, 3, 85,
            29, 14, 4, 22, 4, 20, 198, 237, 62, 74, 251, 46, 232, 63, 19, 213, 160, 21, 179, 93,
            217, 231, 179, 247, 104, 53, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 7, 128,
            48, 15, 6, 9, 42, 134, 72, 134, 247, 99, 100, 6, 22, 4, 2, 5, 0, 48, 13, 6, 9, 42, 134,
            72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 130, 1, 1, 0, 137, 157, 168, 14, 128, 54, 63, 231,
            1, 102, 186, 115, 130, 35, 115, 155, 157, 171, 203, 90, 94, 194, 48, 79, 144, 37, 96,
            154, 73, 49, 4, 9, 82, 54, 184, 198, 110, 74, 102, 87, 63, 85, 172, 230, 245, 228, 210,
            117, 247, 91, 207, 101, 131, 251, 40, 249, 149, 105, 16, 74, 201, 169, 194, 156, 254,
            139, 32, 32, 138, 153, 126, 155, 98, 65, 154, 159, 166, 135, 186, 72, 246, 113, 176,
            149, 140, 36, 2, 8, 63, 62, 185, 22, 240, 62, 248, 254, 103, 254, 246, 216, 157, 58,
            190, 144, 193, 2, 208, 73, 191, 155, 205, 26, 17, 25, 0, 5, 58, 128, 21, 77, 125, 44,
            227, 141, 125, 196, 140, 160, 91, 100, 176, 206, 16, 111, 92, 53, 185, 94, 22, 79, 203,
            242, 29, 78, 215, 163, 218, 211, 125, 162, 251, 24, 128, 224, 95, 55, 218, 36, 17, 69,
            30, 179, 134, 242, 162, 216, 216, 17, 225, 76, 52, 148, 150, 149, 200, 81, 161, 8, 88,
            51, 96, 111, 188, 189, 207, 140, 86, 51, 117, 72, 18, 228, 230, 107, 77, 152, 235, 84,
            49, 53, 240, 57, 72, 107, 192, 207, 85, 234, 168, 120, 78, 194, 235, 223, 88, 111, 199,
            81, 23, 213, 216, 85, 65, 188, 105, 85, 220, 163, 180, 1, 244, 223, 52, 163, 76, 218,
            130, 153, 128, 66, 218, 7, 50, 139, 55, 187, 202, 225, 231, 220, 239, 53, 161, 114, 86,
            209, 48, 130, 4, 187, 48, 130, 3, 163, 160, 3, 2, 1, 2, 2, 1, 2, 48, 13, 6, 9, 42, 134,
            72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 98, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83,
            49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46,
            49, 38, 48, 36, 6, 3, 85, 4, 11, 19, 29, 65, 112, 112, 108, 101, 32, 67, 101, 114, 116,
            105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116,
            121, 49, 22, 48, 20, 6, 3, 85, 4, 3, 19, 13, 65, 112, 112, 108, 101, 32, 82, 111, 111,
            116, 32, 67, 65, 48, 30, 23, 13, 48, 54, 48, 52, 50, 53, 50, 49, 52, 48, 51, 54, 90,
            23, 13, 51, 53, 48, 50, 48, 57, 50, 49, 52, 48, 51, 54, 90, 48, 98, 49, 11, 48, 9, 6,
            3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 65, 112, 112, 108,
            101, 32, 73, 110, 99, 46, 49, 38, 48, 36, 6, 3, 85, 4, 11, 19, 29, 65, 112, 112, 108,
            101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117,
            116, 104, 111, 114, 105, 116, 121, 49, 22, 48, 20, 6, 3, 85, 4, 3, 19, 13, 65, 112,
            112, 108, 101, 32, 82, 111, 111, 116, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42,
            134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1,
            0, 228, 145, 169, 9, 31, 145, 219, 30, 71, 80, 235, 5, 237, 94, 121, 132, 45, 235, 54,
            162, 87, 76, 85, 236, 139, 25, 137, 222, 249, 75, 108, 245, 7, 171, 34, 48, 2, 232, 24,
            62, 248, 80, 9, 211, 127, 65, 168, 152, 249, 209, 202, 102, 156, 36, 107, 17, 208, 163,
            187, 228, 27, 42, 195, 31, 149, 158, 122, 12, 164, 71, 139, 91, 212, 22, 55, 51, 203,
            196, 15, 77, 206, 20, 105, 209, 201, 25, 114, 245, 93, 14, 213, 127, 95, 155, 242, 37,
            3, 186, 85, 143, 77, 93, 13, 241, 100, 53, 35, 21, 75, 21, 89, 29, 179, 148, 247, 246,
            156, 158, 207, 80, 186, 193, 88, 80, 103, 143, 8, 180, 32, 247, 203, 172, 44, 32, 111,
            112, 182, 63, 1, 48, 140, 183, 67, 207, 15, 157, 61, 243, 43, 73, 40, 26, 200, 254,
            206, 181, 185, 14, 217, 94, 28, 214, 203, 61, 181, 58, 173, 244, 15, 14, 0, 146, 11,
            177, 33, 22, 46, 116, 213, 60, 13, 219, 98, 22, 171, 163, 113, 146, 71, 83, 85, 193,
            175, 47, 65, 179, 248, 251, 227, 112, 205, 230, 163, 76, 69, 126, 31, 76, 107, 80, 150,
            65, 137, 196, 116, 98, 11, 16, 131, 65, 135, 51, 138, 129, 177, 48, 88, 236, 90, 4, 50,
            140, 104, 179, 143, 29, 222, 101, 115, 255, 103, 94, 101, 188, 73, 216, 118, 159, 51,
            20, 101, 161, 119, 148, 201, 45, 2, 3, 1, 0, 1, 163, 130, 1, 122, 48, 130, 1, 118, 48,
            14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255,
            4, 5, 48, 3, 1, 1, 255, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 43, 208, 105, 71, 148,
            118, 9, 254, 244, 107, 141, 46, 64, 166, 247, 71, 77, 127, 8, 94, 48, 31, 6, 3, 85, 29,
            35, 4, 24, 48, 22, 128, 20, 43, 208, 105, 71, 148, 118, 9, 254, 244, 107, 141, 46, 64,
            166, 247, 71, 77, 127, 8, 94, 48, 130, 1, 17, 6, 3, 85, 29, 32, 4, 130, 1, 8, 48, 130,
            1, 4, 48, 130, 1, 0, 6, 9, 42, 134, 72, 134, 247, 99, 100, 5, 1, 48, 129, 242, 48, 42,
            6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 30, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119,
            119, 46, 97, 112, 112, 108, 101, 46, 99, 111, 109, 47, 97, 112, 112, 108, 101, 99, 97,
            47, 48, 129, 195, 6, 8, 43, 6, 1, 5, 5, 7, 2, 2, 48, 129, 182, 26, 129, 179, 82, 101,
            108, 105, 97, 110, 99, 101, 32, 111, 110, 32, 116, 104, 105, 115, 32, 99, 101, 114,
            116, 105, 102, 105, 99, 97, 116, 101, 32, 98, 121, 32, 97, 110, 121, 32, 112, 97, 114,
            116, 121, 32, 97, 115, 115, 117, 109, 101, 115, 32, 97, 99, 99, 101, 112, 116, 97, 110,
            99, 101, 32, 111, 102, 32, 116, 104, 101, 32, 116, 104, 101, 110, 32, 97, 112, 112,
            108, 105, 99, 97, 98, 108, 101, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 116, 101,
            114, 109, 115, 32, 97, 110, 100, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115,
            32, 111, 102, 32, 117, 115, 101, 44, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116,
            101, 32, 112, 111, 108, 105, 99, 121, 32, 97, 110, 100, 32, 99, 101, 114, 116, 105,
            102, 105, 99, 97, 116, 105, 111, 110, 32, 112, 114, 97, 99, 116, 105, 99, 101, 32, 115,
            116, 97, 116, 101, 109, 101, 110, 116, 115, 46, 48, 13, 6, 9, 42, 134, 72, 134, 247,
            13, 1, 1, 5, 5, 0, 3, 130, 1, 1, 0, 92, 54, 153, 76, 45, 120, 183, 237, 140, 155, 220,
            243, 119, 155, 242, 118, 210, 119, 48, 79, 193, 31, 133, 131, 133, 27, 153, 61, 71, 55,
            242, 169, 155, 64, 142, 44, 212, 177, 144, 18, 216, 190, 244, 115, 155, 238, 210, 100,
            15, 203, 121, 79, 52, 216, 162, 62, 249, 120, 255, 107, 200, 7, 236, 125, 57, 131, 139,
            83, 32, 211, 56, 196, 177, 191, 154, 79, 10, 107, 255, 43, 252, 89, 167, 5, 9, 124, 23,
            64, 86, 17, 30, 116, 211, 183, 139, 35, 59, 71, 163, 213, 111, 36, 226, 235, 209, 183,
            112, 223, 15, 69, 225, 39, 202, 241, 109, 120, 237, 231, 181, 23, 23, 168, 220, 126,
            34, 53, 202, 37, 213, 217, 15, 214, 107, 212, 162, 36, 35, 17, 247, 161, 172, 143, 115,
            129, 96, 198, 27, 91, 9, 47, 146, 178, 248, 68, 72, 240, 96, 56, 158, 21, 245, 61, 38,
            103, 32, 138, 51, 106, 247, 13, 130, 207, 222, 235, 163, 47, 249, 83, 106, 91, 100,
            192, 99, 51, 119, 247, 58, 7, 44, 86, 235, 218, 15, 33, 14, 218, 186, 115, 25, 79, 181,
            217, 54, 127, 193, 135, 85, 217, 167, 153, 185, 50, 66, 251, 216, 213, 113, 158, 126,
            161, 82, 183, 27, 189, 147, 66, 36, 18, 42, 199, 15, 29, 182, 77, 156, 94, 99, 200, 75,
            128, 23, 80, 170, 138, 213, 218, 228, 252, 208, 9, 7, 55, 176, 117, 117, 33, 49, 130,
            3, 143, 48, 130, 3, 139, 2, 1, 1, 48, 129, 139, 48, 127, 49, 11, 48, 9, 6, 3, 85, 4, 6,
            19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 12, 10, 65, 112, 112, 108, 101, 32, 73,
            110, 99, 46, 49, 38, 48, 36, 6, 3, 85, 4, 11, 12, 29, 65, 112, 112, 108, 101, 32, 67,
            101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111,
            114, 105, 116, 121, 49, 51, 48, 49, 6, 3, 85, 4, 3, 12, 42, 65, 112, 112, 108, 101, 32,
            67, 111, 100, 101, 32, 83, 105, 103, 110, 105, 110, 103, 32, 67, 101, 114, 116, 105,
            102, 105, 99, 97, 116, 105, 111, 110, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121,
            2, 8, 100, 239, 234, 254, 194, 57, 232, 165, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4,
            2, 1, 5, 0, 160, 130, 1, 212, 48, 24, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 3, 49, 11,
            6, 9, 42, 134, 72, 134, 247, 13, 1, 7, 1, 48, 28, 6, 9, 42, 134, 72, 134, 247, 13, 1,
            9, 5, 49, 15, 23, 13, 50, 50, 48, 50, 49, 50, 48, 57, 51, 53, 52, 48, 90, 48, 47, 6, 9,
            42, 134, 72, 134, 247, 13, 1, 9, 4, 49, 34, 4, 32, 19, 58, 56, 219, 35, 128, 73, 83,
            222, 155, 168, 165, 21, 22, 81, 191, 156, 103, 86, 165, 144, 152, 184, 226, 192, 181,
            148, 91, 80, 253, 131, 130, 48, 60, 6, 9, 42, 134, 72, 134, 247, 99, 100, 9, 2, 49, 47,
            48, 45, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 4, 32, 19, 58, 56, 219, 35, 128, 73, 83,
            222, 155, 168, 165, 21, 22, 81, 191, 156, 103, 86, 165, 144, 152, 184, 226, 192, 181,
            148, 91, 80, 253, 131, 130, 48, 130, 1, 41, 6, 9, 42, 134, 72, 134, 247, 99, 100, 9, 1,
            49, 130, 1, 26, 4, 130, 1, 22, 60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111,
            110, 61, 34, 49, 46, 48, 34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34, 85, 84,
            70, 45, 56, 34, 63, 62, 10, 60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 112, 108, 105, 115,
            116, 32, 80, 85, 66, 76, 73, 67, 32, 34, 45, 47, 47, 65, 112, 112, 108, 101, 47, 47,
            68, 84, 68, 32, 80, 76, 73, 83, 84, 32, 49, 46, 48, 47, 47, 69, 78, 34, 32, 34, 104,
            116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 97, 112, 112, 108, 101, 46, 99, 111, 109,
            47, 68, 84, 68, 115, 47, 80, 114, 111, 112, 101, 114, 116, 121, 76, 105, 115, 116, 45,
            49, 46, 48, 46, 100, 116, 100, 34, 62, 10, 60, 112, 108, 105, 115, 116, 32, 118, 101,
            114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 62, 10, 60, 100, 105, 99, 116, 62, 10,
            9, 60, 107, 101, 121, 62, 99, 100, 104, 97, 115, 104, 101, 115, 60, 47, 107, 101, 121,
            62, 10, 9, 60, 97, 114, 114, 97, 121, 62, 10, 9, 9, 60, 100, 97, 116, 97, 62, 10, 9, 9,
            69, 122, 111, 52, 50, 121, 79, 65, 83, 86, 80, 101, 109, 54, 105, 108, 70, 82, 90, 82,
            118, 53, 120, 110, 86, 113, 85, 61, 10, 9, 9, 60, 47, 100, 97, 116, 97, 62, 10, 9, 60,
            47, 97, 114, 114, 97, 121, 62, 10, 60, 47, 100, 105, 99, 116, 62, 10, 60, 47, 112, 108,
            105, 115, 116, 62, 10, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 4, 130,
            1, 0, 157, 82, 5, 203, 171, 157, 222, 218, 86, 111, 200, 134, 43, 158, 168, 112, 180,
            239, 83, 172, 231, 118, 207, 157, 236, 165, 251, 103, 109, 78, 42, 23, 167, 43, 159,
            66, 165, 254, 35, 89, 65, 61, 106, 58, 155, 76, 156, 185, 101, 74, 56, 210, 205, 107,
            11, 132, 201, 108, 251, 142, 112, 226, 242, 18, 148, 153, 105, 195, 101, 178, 37, 203,
            206, 240, 82, 161, 128, 184, 158, 105, 240, 67, 52, 190, 170, 95, 96, 212, 44, 29, 194,
            202, 33, 246, 61, 17, 217, 68, 237, 30, 216, 54, 127, 167, 254, 186, 13, 190, 214, 8,
            180, 240, 31, 162, 102, 11, 152, 20, 12, 208, 78, 195, 73, 178, 21, 121, 148, 205, 111,
            235, 105, 214, 7, 25, 219, 235, 233, 249, 170, 252, 77, 70, 12, 65, 169, 189, 234, 132,
            196, 92, 181, 122, 10, 218, 181, 140, 247, 212, 149, 190, 95, 194, 218, 150, 62, 108,
            77, 22, 4, 144, 94, 179, 225, 124, 27, 140, 211, 20, 64, 23, 254, 2, 133, 65, 64, 159,
            77, 151, 117, 0, 8, 119, 126, 174, 50, 124, 198, 27, 166, 124, 18, 96, 77, 221, 96, 60,
            218, 20, 242, 184, 209, 58, 68, 24, 161, 84, 56, 27, 100, 225, 27, 138, 95, 80, 118,
            168, 34, 127, 175, 172, 10, 135, 157, 4, 33, 85, 165, 188, 204, 26, 227, 172, 8, 20,
            216, 166, 140, 82, 10, 182, 54, 146, 244, 199, 199, 222, 0, 0, 0, 0, 0, 0,
        ];

        let (_, results) = CodeSign::parse_certs(&test_data).unwrap();
        assert_eq!(results, "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");
    }

    #[test]
    fn test_parse_code_directory_team_id() {
        let test_data = [
            250, 222, 12, 2, 0, 0, 4, 41, 0, 2, 5, 0, 0, 1, 0, 0, 0, 0, 1, 105, 0, 0, 0, 96, 0, 0,
            0, 7, 0, 0, 0, 22, 0, 1, 91, 48, 32, 2, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 11, 1, 0, 0, 0, 0, 0, 99, 111, 109, 46, 111, 98, 106, 101, 99,
            116, 105, 118, 101, 45, 115, 101, 101, 46, 102, 105, 108, 101, 109, 111, 110, 105, 116,
            111, 114, 0, 86, 66, 71, 57, 55, 85, 66, 52, 84, 65, 0, 33, 114, 215, 207, 167, 51,
            115, 104, 75, 188, 156, 95, 236, 29, 100, 135, 100, 126, 188, 125, 207, 29, 47, 142,
            178, 43, 192, 83, 140, 89, 110, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 118, 197, 81, 62, 249, 187, 194, 193,
            200, 235, 186, 235, 226, 91, 96, 103, 62, 209, 26, 95, 5, 186, 45, 231, 176, 6, 129,
            131, 218, 214, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 57, 143, 88, 162, 189, 250, 45, 22, 85, 16, 144, 81,
            139, 226, 191, 6, 103, 130, 222, 161, 83, 47, 81, 151, 104, 194, 120, 149, 104, 247,
            89, 212, 43, 23, 115, 164, 26, 128, 63, 163, 138, 210, 182, 64, 143, 28, 162, 108, 32,
            114, 114, 227, 90, 22, 106, 247, 66, 141, 89, 10, 145, 243, 85, 82, 245, 188, 66, 75,
            221, 7, 170, 171, 169, 56, 94, 165, 77, 244, 23, 159, 178, 182, 81, 209, 39, 169, 172,
            23, 54, 33, 109, 85, 238, 195, 221, 158, 249, 20, 76, 186, 238, 171, 18, 64, 117, 124,
            225, 157, 204, 176, 19, 88, 202, 134, 0, 48, 178, 32, 82, 251, 235, 35, 139, 75, 16,
            115, 207, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107, 2,
            79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 173, 127,
            172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124,
            180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 173, 127, 172, 178, 88, 111, 198,
            233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218,
            189, 139, 72, 137, 44, 167, 208, 158, 163, 101, 246, 22, 157, 127, 246, 249, 34, 77,
            97, 72, 46, 242, 67, 187, 24, 8, 236, 207, 177, 118, 147, 224, 233, 150, 166, 37, 29,
            72, 104, 167, 102, 105, 43, 140, 106, 140, 244, 191, 73, 83, 83, 175, 194, 101, 2, 116,
            98, 28, 186, 105, 147, 107, 63, 103, 252, 83, 212, 99, 147, 248, 77, 222, 201, 74, 117,
            229, 169, 109, 16, 61, 251, 105, 188, 71, 127, 104, 7, 150, 14, 96, 217, 136, 245, 190,
            85, 88, 144, 116, 59, 27, 26, 207, 36, 33, 107, 172, 76, 217, 214, 66, 242, 182, 250,
            77, 165, 186, 156, 124, 150, 30, 76, 227, 68, 242, 207, 21, 179, 176, 19, 98, 59, 77,
            89, 174, 78, 235, 73, 44, 50, 170, 251, 175, 150, 246, 38, 137, 103, 92, 112, 247, 170,
            2, 192, 140, 171, 128, 97, 184, 99, 68, 106, 180, 156, 192, 189, 24, 82, 67, 195, 210,
            237, 237, 217, 19, 80, 211, 235, 75, 65, 190, 211, 29, 59, 98, 108, 171, 183, 15, 170,
            111, 62, 131, 209, 46, 44, 246, 138, 221, 183, 205, 52, 105, 177, 16, 174, 247, 182,
            245, 36, 113, 147, 211, 178, 117, 121, 58, 175, 162, 11, 140, 119, 36, 110, 71, 207,
            211, 160, 185, 69, 49, 156, 74, 29, 224, 212, 174, 17, 94, 51, 142, 57, 180, 88, 138,
            113, 116, 14, 214, 255, 109, 45, 236, 38, 135, 98, 49, 146, 202, 43, 111, 199, 219,
            135, 196, 4, 144, 214, 237, 53, 66, 123, 39, 119, 67, 220, 167, 18, 44, 160, 181, 221,
            107, 211, 254, 107, 210, 44, 27, 191, 27, 39, 54, 224, 116, 173, 127, 172, 178, 88,
            111, 198, 233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122,
            133, 218, 189, 139, 72, 137, 44, 167, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192,
            4, 215, 209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72,
            137, 44, 167, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107,
            2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 46, 95,
            18, 201, 131, 82, 121, 132, 227, 81, 115, 247, 220, 60, 27, 254, 133, 214, 217, 139,
            114, 74, 9, 43, 147, 38, 63, 141, 21, 111, 39, 107, 205, 107, 174, 6, 247, 199, 50,
            139, 160, 30, 16, 85, 185, 215, 143, 32, 126, 116, 174, 234, 34, 43, 144, 29, 155, 182,
            143, 241, 137, 156, 120, 102, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215,
            209, 209, 107, 2, 79, 88, 5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44,
            167, 173, 127, 172, 178, 88, 111, 198, 233, 102, 192, 4, 215, 209, 209, 107, 2, 79, 88,
            5, 255, 124, 180, 124, 122, 133, 218, 189, 139, 72, 137, 44, 167, 111, 231, 202, 160,
            139, 225, 251, 107, 112, 235, 75, 7, 98, 246, 228, 84, 67, 160, 85, 186, 123, 31, 241,
            250, 246, 81, 254, 112, 81, 176, 67, 65, 132, 66, 108, 3, 236, 175, 229, 66, 170, 175,
            247, 207, 222, 252, 59, 115, 178, 123, 111, 167, 114, 122, 181, 223, 183, 162, 39, 86,
            2, 230, 45, 249,
        ];

        let (_, results) = CodeSign::parse_code_directory(&test_data).unwrap();
        assert_eq!(results.magic, 0xfade0c02);
        assert_eq!(results.id, "com.objective-see.filemonitor");
        assert_eq!(results.team_id, "VBG97UB4TA");
        assert_eq!(results.flags, 65536);
        assert_eq!(results.length, 1065);
        assert_eq!(results.version, 132352);
        assert_eq!(results.hash_offset, 361);
        assert_eq!(results.ident_offset, 96);
        assert_eq!(results.n_special_slots, 7);
        assert_eq!(results.n_code_slots, 22);
        assert_eq!(results.code_limit, 88880);
        assert_eq!(results.hash_size, 32);
        assert_eq!(results.hash_type, 2);
        assert_eq!(results.platform, 0);
        assert_eq!(results.page_size, 12);
        assert_eq!(results.spare2, 0);
        assert_eq!(
            results.hash_pages,
            [
                "2172d7cfa73373684bbc9c5fec1d6487647ebc7dcf1d2f8eb22bc0538c596e4c",
                "0000000000000000000000000000000000000000000000000000000000000000",
                "7e76c5513ef9bbc2c1c8ebbaebe25b60673ed11a5f05ba2de7b0068183dad6c1",
                "0000000000000000000000000000000000000000000000000000000000000000",
                "fd398f58a2bdfa2d16551090518be2bf066782dea1532f519768c2789568f759",
                "d42b1773a41a803fa38ad2b6408f1ca26c207272e35a166af7428d590a91f355",
                "52f5bc424bdd07aaaba9385ea54df4179fb2b651d127a9ac1736216d55eec3dd",
                "9ef9144cbaeeab1240757ce19dccb01358ca860030b22052fbeb238b4b1073cf",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "d09ea365f6169d7ff6f9224d61482ef243bb1808eccfb17693e0e996a6251d48",
                "68a766692b8c6a8cf4bf495353afc2650274621cba69936b3f67fc53d46393f8",
                "4ddec94a75e5a96d103dfb69bc477f6807960e60d988f5be555890743b1b1acf",
                "24216bac4cd9d642f2b6fa4da5ba9c7c961e4ce344f2cf15b3b013623b4d59ae",
                "4eeb492c32aafbaf96f62689675c70f7aa02c08cab8061b863446ab49cc0bd18",
                "5243c3d2ededd91350d3eb4b41bed31d3b626cabb70faa6f3e83d12e2cf68add",
                "b7cd3469b110aef7b6f5247193d3b275793aafa20b8c77246e47cfd3a0b94531",
                "9c4a1de0d4ae115e338e39b4588a71740ed6ff6d2dec2687623192ca2b6fc7db",
                "87c40490d6ed35427b277743dca7122ca0b5dd6bd3fe6bd22c1bbf1b2736e074",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "2e5f12c983527984e35173f7dc3c1bfe85d6d98b724a092b93263f8d156f276b",
                "cd6bae06f7c7328ba01e1055b9d78f207e74aeea222b901d9bb68ff1899c7866",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7",
                "6fe7caa08be1fb6b70eb4b0762f6e45443a055ba7b1ff1faf651fe7051b04341",
                "84426c03ecafe542aaaff7cfdefc3b73b27b6fa7727ab5dfb7a2275602e62df9"
            ]
        );
    }
}
