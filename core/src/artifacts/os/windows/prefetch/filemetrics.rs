use crate::utils::nom_helper::{nom_unsigned_four_bytes, nom_unsigned_two_bytes, Endian};
use nom::bytes::complete::take;

pub(crate) struct FileMetricsVersion23 {
    _unknown: u32,
    _unknown2: u32,
    _unknown3: u32,
    pub(crate) filename_offset: u32,
    pub(crate) filename_size: u32,
    _unknown4: u32,
    _mft_index: Vec<u8>, // 6 bytes
    _sequence_number: u16,
}

impl FileMetricsVersion23 {
    /// Get File metrics related to accessed files.
    /// Version 23 supports Win7+
    pub(crate) fn parse_file_metrics<'a>(
        data: &'a [u8],
        metrics_offset: u32,
        number_entries: &'a u32,
    ) -> nom::IResult<&'a [u8], Vec<FileMetricsVersion23>> {
        let mut metrics_vec: Vec<FileMetricsVersion23> = Vec::new();
        let mut count = 0;
        let (mut metrics_data, _) = take(metrics_offset)(data)?;
        while &count < number_entries {
            let (input, unknown) = nom_unsigned_four_bytes(metrics_data, Endian::Le)?;
            let (input, unknown2) = nom_unsigned_four_bytes(input, Endian::Le)?;
            let (input, unknown3) = nom_unsigned_four_bytes(input, Endian::Le)?;
            let (input, filename_offset) = nom_unsigned_four_bytes(input, Endian::Le)?;

            let (input, filename_size) = nom_unsigned_four_bytes(input, Endian::Le)?;
            let (input, unknown4) = nom_unsigned_four_bytes(input, Endian::Le)?;
            let mft_size: usize = 6;
            let (input, mft_index_data) = take(mft_size)(input)?;
            let (input, sequence_number) = nom_unsigned_two_bytes(input, Endian::Le)?;
            let utf16_adjust = 2;

            let metrics = FileMetricsVersion23 {
                _unknown: unknown,
                _unknown2: unknown2,
                _unknown3: unknown3,
                filename_offset,
                filename_size: filename_size * utf16_adjust,
                _unknown4: unknown4,
                _mft_index: mft_index_data.to_vec(),
                _sequence_number: sequence_number,
            };
            count += 1;
            metrics_vec.push(metrics);
            metrics_data = input;
        }

        Ok((metrics_data, metrics_vec))
    }
}

#[cfg(test)]
mod tests {
    use super::FileMetricsVersion23;

    #[test]
    fn test_parse_file_metrics() {
        let test_data = vec![
            0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 124, 0, 0, 0, 62, 0, 0, 0, 2, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 250, 0, 0, 0, 61, 0, 0, 0, 2,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 118, 1, 0, 0, 62,
            0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 43, 0, 0, 0, 43, 0, 0, 0,
            244, 1, 0, 0, 61, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 4, 0, 0, 0,
            4, 0, 0, 0, 112, 2, 0, 0, 65, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
            13, 0, 0, 0, 13, 0, 0, 0, 244, 2, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 71, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 118, 3, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 76, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 248, 3, 0, 0, 64, 0, 0, 0, 0, 1, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 49, 0, 0, 0, 49, 0, 0, 0, 122, 4, 0, 0, 64, 0,
            0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 252, 4,
            0, 0, 62, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 6, 0, 0, 0, 6, 0,
            0, 0, 122, 5, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 173,
            0, 0, 0, 173, 0, 0, 0, 252, 5, 0, 0, 61, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            57, 1, 0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 120, 6, 0, 0, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 177, 1, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 254, 6, 0, 0, 62, 0, 0, 0, 2,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 1, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 124, 7, 0, 0,
            63, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 1, 0, 0, 28, 0, 0, 0, 28, 0, 0,
            0, 252, 7, 0, 0, 63, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 2, 0, 0, 56, 0,
            0, 0, 56, 0, 0, 0, 124, 8, 0, 0, 70, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
            2, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 10, 9, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 111, 2, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 140, 9, 0, 0, 65, 0, 0, 0, 0, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 148, 2, 0, 0, 65, 0, 0, 0, 65, 0, 0, 0, 16, 10, 0, 0, 64, 0, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213, 2, 0, 0, 94, 0, 0, 0, 94, 0, 0, 0, 146, 10,
            0, 0, 63, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 3, 0, 0, 61, 0, 0, 0, 61, 0,
            0, 0, 18, 11, 0, 0, 62, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 3, 0, 0, 43,
            0, 0, 0, 43, 0, 0, 0, 144, 11, 0, 0, 62, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            155, 3, 0, 0, 23, 0, 0, 0, 23, 0, 0, 0, 14, 12, 0, 0, 62, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 178, 3, 0, 0, 29, 0, 0, 0, 29, 0, 0, 0, 140, 12, 0, 0, 61, 0, 0, 0, 0,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 3, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 8, 13, 0, 0,
            65, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245, 3, 0, 0, 40, 0, 0, 0, 40, 0, 0,
            0, 140, 13, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 4, 0, 0, 58, 0,
            0, 0, 58, 0, 0, 0, 14, 14, 0, 0, 62, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
            4, 0, 0, 25, 0, 0, 0, 25, 0, 0, 0, 140, 14, 0, 0, 63, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 112, 4, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 12, 15, 0, 0, 61, 0, 0, 0, 0, 1, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 4, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 136, 15, 0, 0, 61,
            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 4, 0, 0, 133, 0, 0, 0, 133, 0, 0, 0,
            4, 16, 0, 0, 70, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 231, 3, 0, 0,
            231, 3, 0, 0, 146, 16, 0, 0, 98, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233, 8,
            0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 88, 17, 0, 0, 97, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 14, 9, 0, 0, 42, 0, 0, 0, 42, 0, 0, 0, 28, 18, 0, 0, 99, 0, 0, 0, 2, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 56, 9, 0, 0, 70, 0, 0, 0, 70, 0, 0, 0, 228, 18, 0, 0, 97, 0, 0,
            0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 9, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 168, 19,
            0, 0, 39, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 9, 0, 0, 78, 0, 0, 0, 78,
            0, 0, 0, 248, 19, 0, 0, 99, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 9, 0, 0,
            44, 0, 0, 0, 44, 0, 0, 0, 192, 20, 0, 0, 97, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 255, 9, 0, 0, 50, 0, 0, 0, 50, 0, 0, 0, 132, 21, 0, 0, 99, 0, 0, 0, 2, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 49, 10, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 76, 22, 0, 0, 101, 0, 0,
            0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 10, 0, 0, 42, 0, 0, 0, 42, 0, 0, 0, 24, 23,
            0, 0, 103, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 10, 0, 0, 47, 0, 0, 0, 47,
            0, 0, 0, 232, 23, 0, 0, 100, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 10, 0,
            0, 52, 0, 0, 0, 52, 0, 0, 0, 178, 24, 0, 0, 102, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 228, 10, 0, 0, 71, 0, 0, 0, 71, 0, 0, 0, 128, 25, 0, 0, 100, 0, 0, 0, 2, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 43, 11, 0, 0, 79, 0, 0, 0, 79, 0, 0, 0, 74, 26, 0, 0, 102, 0,
            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 11, 0, 0, 63, 0, 0, 0, 63, 0, 0, 0, 24,
            27, 0, 0, 97, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 185, 11, 0, 0, 72, 0, 0, 0,
            72, 0, 0, 0, 220, 27, 0, 0, 99, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12, 0,
            0, 77, 0, 0, 0, 77, 0, 0, 0, 164, 28, 0, 0, 97, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 78, 12, 0, 0, 86, 0, 0, 0, 86, 0, 0, 0, 104, 29, 0, 0, 99, 0, 0, 0, 2, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 164, 12, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 48, 30, 0, 0, 99, 0,
            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 12, 0, 0, 42, 0, 0, 0, 42, 0, 0, 0, 248,
            30, 0, 0, 101, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 12, 0, 0, 73, 0, 0, 0,
            73, 0, 0, 0, 196, 31, 0, 0, 99, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 13, 0,
            0, 81, 0, 0, 0, 81, 0, 0, 0, 140, 32, 0, 0, 101, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 141, 13, 0, 0, 109, 0, 0, 0, 109, 0, 0, 0, 88, 33, 0, 0, 100, 0, 0, 0, 2, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 13, 0, 0, 142, 0, 0, 0, 142, 0, 0, 0, 34, 34, 0, 0,
            102, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 14, 0, 0, 211, 0, 0, 0, 211, 0,
            0, 0, 240, 34, 0, 0, 101, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 15, 0, 0,
            18, 1, 0, 0, 18, 1, 0, 0, 188, 35, 0, 0, 103, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 109, 16, 0, 0, 108, 0, 0, 0, 108, 0, 0, 0, 140, 36, 0, 0, 97, 0, 0, 0, 2, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 217, 16, 0, 0, 126, 0, 0, 0, 126, 0, 0, 0, 80, 37, 0, 0, 99, 0,
            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 17, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 24, 38,
            0, 0, 100, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 17, 0, 0, 17, 0, 0, 0, 17,
            0, 0, 0, 226, 38, 0, 0, 98, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 17, 0, 0,
            2, 0, 0, 0, 2, 0, 0, 0, 168, 39, 0, 0, 95, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        let number_entries = 64;
        let (_, results) =
            FileMetricsVersion23::parse_file_metrics(&test_data, 0, &number_entries).unwrap();

        assert_eq!(results.len(), 64);
        assert_eq!(results[0].filename_offset, 0);
        assert_eq!(results[0].filename_size, 0x7a);

        assert_eq!(results[15].filename_offset, 0x77c);
        assert_eq!(results[15].filename_size, 0x7e);

        assert_eq!(results[63].filename_offset, 0x27a8);
        assert_eq!(results[63].filename_size, 0xbe);
    }
}
