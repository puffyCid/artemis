use crate::{runtime::helper::bytes_arg, utils::encoding::parse_protobuf};
use boa_engine::{js_string, Context, JsError, JsResult, JsValue};

/// Parse Protobuf data
pub(crate) fn js_parse_protobuf(
    _this: &JsValue,
    args: &[JsValue],
    context: &mut Context,
) -> JsResult<JsValue> {
    let data = bytes_arg(args, &0, context)?;

    let result = match parse_protobuf(&data) {
        Ok(result) => result,
        Err(err) => {
            let issue = format!("Could not get decode protobuf: {err:?}");
            return Err(JsError::from_opaque(js_string!(issue).into()));
        }
    };
    let res = serde_json::to_value(&result).unwrap_or_default();
    let value = JsValue::from_json(&res, context)?;

    Ok(value)
}

#[cfg(test)]
mod tests {
    use crate::{
        runtime::run::execute_script,
        structs::{artifacts::runtime::script::JSScript, toml::Output},
    };

    fn output_options(name: &str, output: &str, directory: &str, compress: bool) -> Output {
        Output {
            name: name.to_string(),
            directory: directory.to_string(),
            format: String::from("json"),
            compress,
            url: Some(String::new()),
            api_key: Some(String::new()),
            endpoint_id: String::from("abcd"),
            collection_id: 0,
            output: output.to_string(),
            filter_name: None,
            filter_script: None,
            logging: None,
        }
    }

    #[test]
    fn test_js_parse_protobuf() {
        let test = "dmFyIEVycm9yQmFzZT1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUscil7c3VwZXIoKSx0aGlzLm5hbWU9ZSx0aGlzLm1lc3NhZ2U9cn19LEZpbGVFcnJvcj1jbGFzcyBleHRlbmRzIEVycm9yQmFzZXt9O2Z1bmN0aW9uIHN0YXQoZSl7dHJ5e3JldHVybiBqc19zdGF0KGUpfWNhdGNoKHIpe3JldHVybiBuZXcgRmlsZUVycm9yKCJTVEFUIixgZmFpbGVkIHRvIHN0YXQgJHtlfTogJHtyfWApfX1mdW5jdGlvbiByZWFkRmlsZShlKXt0cnl7cmV0dXJuIGpzX3JlYWRfZmlsZShlKX1jYXRjaChyKXtyZXR1cm4gbmV3IEZpbGVFcnJvcigiUkVBRF9GSUxFIixgZmFpbGVkIHRvIHJlYWQgZmlsZSAke2V9OiAke3J9YCl9fWZ1bmN0aW9uIGdsb2IoZSl7dHJ5e3JldHVybiBqc19nbG9iKGUpfWNhdGNoKHIpe3JldHVybiBuZXcgRmlsZUVycm9yKCJHTE9CIixgZmFpbGVkIHRvIGdsb2IgcGF0dGVybiAke2V9IiAke3J9YCl9fXZhciBNYWNvc0Vycm9yPWNsYXNzIGV4dGVuZHMgRXJyb3JCYXNle30sTm9tRXJyb3I9Y2xhc3MgZXh0ZW5kcyBFcnJvckJhc2V7fTtmdW5jdGlvbiB0YWtlKGUscil7aWYocjwwKXJldHVybiBuZXcgTm9tRXJyb3IoIk5PTSIsInByb3ZpZGVkIG5lZ2F0aXZlIG51bWJlciIpO2lmKGUubGVuZ3RoPHIpcmV0dXJuIG5ldyBOb21FcnJvcigiTk9NIixgd2FudGVkICR7cn0gYnV0IGlucHV0IGlzICR7ZS5sZW5ndGh9YCk7Y29uc3QgdD1lLnNsaWNlKDAscik7cmV0dXJue3JlbWFpbmluZzplLnNsaWNlKHIpLG5vbW1lZDp0fX1mdW5jdGlvbiBub21VbnNpZ25lZEZvdXJCeXRlcyhlLHIpe2lmKGUuYnVmZmVyLmJ5dGVMZW5ndGg8NClyZXR1cm4gbmV3IE5vbUVycm9yKCJOT00iLCJmZXdlciB0aGFuIGZvdXIgYnl0ZXMgaW4gaW5wdXQiKTtsZXQgdD0hMTsxPT09ciYmKHQ9ITApO2NvbnN0IG49ZS5idWZmZXIuc2xpY2UoMCw0KSxvPW5ldyBEYXRhVmlldyhuLnNsaWNlKDAsbi5ieXRlTGVuZ3RoKSkuZ2V0VWludDMyKDAsdCk7cmV0dXJue3JlbWFpbmluZzplLnNsaWNlKDQpLHZhbHVlOm99fWZ1bmN0aW9uIG5vbVVuc2lnbmVkRWlnaHRCeXRlcyhlLHIpe2lmKGUuYnVmZmVyLmJ5dGVMZW5ndGg8OClyZXR1cm4gbmV3IE5vbUVycm9yKCJOT00iLCJmZXdlciB0aGFuIGVpZ2h0IGJ5dGVzIGluIGlucHV0Iik7bGV0IHQ9ITE7MT09PXImJih0PSEwKTtjb25zdCBuPWUuYnVmZmVyLnNsaWNlKDAsOCksbz1uZXcgRGF0YVZpZXcobi5zbGljZSgwLG4uYnl0ZUxlbmd0aCkpLmdldEJpZ1VpbnQ2NCgwLHQpO3JldHVybntyZW1haW5pbmc6ZS5zbGljZSg4KSx2YWx1ZTpvfX12YXIgRW5jb2RpbmdFcnJvcj1jbGFzcyBleHRlbmRzIEVycm9yQmFzZXt9O2Z1bmN0aW9uIGVuY29kZShlKXtyZXR1cm4ganNfYmFzZTY0X2VuY29kZShlKX1mdW5jdGlvbiBwYXJzZVByb3RvYnVmKGUpe3RyeXtyZXR1cm4ganNfcGFyc2VfcHJvdG9idWYoZSl9Y2F0Y2goZSl7cmV0dXJuIG5ldyBFbmNvZGluZ0Vycm9yKCJQUk9UT0JVRiIsYGZhaWxlZCB0byBwYXJzZSBwcm90b2J1ZjogJHtlfWApfX1mdW5jdGlvbiBwYXJzZUJpb21lKGU9ITAscil7bGV0IHQ9W107aWYobnVsbCE9cil0PVtyXTtlbHNle2NvbnN0IGU9WyIvVXNlcnMvKi9MaWJyYXJ5L0Jpb21lL3N0cmVhbXMvKi8qL2xvY2FsLyoiLCIvVXNlcnMvKi9MaWJyYXJ5L0Jpb21lL3N0cmVhbXMvKi8qL2xvY2FsL3RvbWJzdG9uZS8qIiwiL3ByaXZhdGUvdmFyL2RiL2Jpb21lL3N0cmVhbXMvKi8qL2xvY2FsLyoiLCIvcHJpdmF0ZS92YXIvZGIvYmlvbWUvc3RyZWFtcy8qLyovbG9jYWwvdG9tYnN0b25lLyoiXTtmb3IoY29uc3QgciBvZiBlKXtjb25zdCBlPWdsb2Iocik7aWYoZSBpbnN0YW5jZW9mIEZpbGVFcnJvciljb25zb2xlLndhcm4oYENvdWxkIG5vdCBnbG9iICR7cn06ICR7ZX1gKTtlbHNlIGZvcihjb25zdCByIG9mIGUpdC5wdXNoKHIuZnVsbF9wYXRoKX19Y29uc3Qgbj1bXTtmb3IoY29uc3QgciBvZiB0KXtpZihlJiYhci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCJhcHAuaW5mb2N1IikpY29udGludWU7Y29uc3QgdD1zdGF0KHIpO2lmKHQgaW5zdGFuY2VvZiBGaWxlRXJyb3J8fHQuaXNfZGlyZWN0b3J5KWNvbnRpbnVlO2NvbnN0IG89ZXh0cmFjdEJpb21lKHIpO2lmKG8gaW5zdGFuY2VvZiBNYWNvc0Vycm9yKXtjb25zb2xlLndhcm4oYERpZCBub3QgZXh0cmFjdCBCSU9NRXMgZnJvbSAke3J9OiAke299YCk7Y29udGludWV9Y29uc3Qgcz17cGF0aDpyLHJhdzpbXX07Zm9yKGNvbnN0IGUgb2Ygbyl7aWYodm9pZCAwPT09ZS5wcm90b2J1Zl9ieXRlcy5hdCgwKXx8MD09PWUucHJvdG9idWZfYnl0ZXMuYXQoMCkpY29udGludWU7Y29uc3QgdD1wYXJzZVByb3RvYnVmKGUucHJvdG9idWZfYnl0ZXMpO3QgaW5zdGFuY2VvZiBFbmNvZGluZ0Vycm9yPyhjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcGFyc2UgYWxsIHByb3RvYnVmIGRhdGEgZm9yICR7cn06ICR7dH1gKSxzLnJhdy5wdXNoKHt1bmtub3duOmVuY29kZShlLnByb3RvYnVmX2J5dGVzKX0pKTpzLnJhdy5wdXNoKHQpfW4ucHVzaChzKX1yZXR1cm4gbn1mdW5jdGlvbiBleHRyYWN0QmlvbWUoZSl7Y29uc3Qgcj1yZWFkRmlsZShlKTtpZihyIGluc3RhbmNlb2YgRmlsZUVycm9yKXJldHVybiBuZXcgTWFjb3NFcnJvcigiQklPTUUiLGBmYWlsZWQgdG8gcmVhZCAke2V9OiAke3J9YCk7Y29uc3QgdD1ub21VbnNpZ25lZEZvdXJCeXRlcyhyLDEpO2lmKHQgaW5zdGFuY2VvZiBOb21FcnJvcilyZXR1cm4gbmV3IE1hY29zRXJyb3IoIkJJT01FIixgZmFpbGVkIHRvIGdldCBoZWFkZXIgc2lnIGZvciAke2V9OiAke3R9YCk7bGV0IG49NTY7aWYoMTExMTk2NzA1OSE9dC52YWx1ZSl7Y29uc3QgdD10YWtlKHIsbik7aWYodCBpbnN0YW5jZW9mIE5vbUVycm9yKXJldHVybiBuZXcgTWFjb3NFcnJvcigiQklPTUUiLGBmYWlsZWQgdG8gZ2V0IGhlYWRlciBkYXRhIGZvciAke2V9OiAke3R9YCk7bGV0IG89dC5yZW1haW5pbmc7Y29uc3Qgcz0zMixpPVtdO2Zvcig7by5ieXRlTGVuZ3RoPj1zOyl7Y29uc3QgZT1uZXcgVWludDhBcnJheShvLmJ1ZmZlci5zbGljZSgwLHMrMSkpO289bmV3IFVpbnQ4QXJyYXkoby5idWZmZXIuc2xpY2UocykpO2NvbnN0IHI9cGFyc2VSZWNvcmQoZSxvKTtpZihyIGluc3RhbmNlb2YgTWFjb3NFcnJvcilyZXR1cm4gcjt2b2lkIDAhPT1yLnByb3RvYnVmX2J5dGVzLmF0KDApJiYwIT09ci5wcm90b2J1Zl9ieXRlcy5hdCgwKT8obz1yLnJlbWFpbmluZyxpLnB1c2gocikpOm89ci5yZW1haW5pbmd9cmV0dXJuIGl9bj0zMjtjb25zdCBvPXRha2UocixuKTtpZihvIGluc3RhbmNlb2YgTm9tRXJyb3IpcmV0dXJuIG5ldyBNYWNvc0Vycm9yKCJCSU9NRSIsYGZhaWxlZCB0byBnZXQgaGVhZGVyIHYyIGRhdGEgZm9yICR7ZX06ICR7b31gKTtjb25zdCBzPW5vbVVuc2lnbmVkRm91ckJ5dGVzKHIsMSk7aWYocyBpbnN0YW5jZW9mIE5vbUVycm9yKXJldHVybiBuZXcgTWFjb3NFcnJvcigiQklPTUUiLGBmYWlsZWQgdG8gZ2V0IGhlYWRlciBzaWcgZm9yICR7ZX06ICR7c31gKTtjb25zdCBpPW5vbVVuc2lnbmVkRm91ckJ5dGVzKHMucmVtYWluaW5nLDEpO2lmKGkgaW5zdGFuY2VvZiBOb21FcnJvcilyZXR1cm4gbmV3IE1hY29zRXJyb3IoIkJJT01FIixgZmFpbGVkIHRvIGdldCBoZWFkZXIgdjIgZW50cmllcyBmb3IgJHtlfTogJHtpfWApO2NvbnN0IGE9MTYqaS52YWx1ZTtpZihhPnIubGVuZ3RoKXJldHVybiBuZXcgTWFjb3NFcnJvcigiQklPTUUiLGBmYWlsZWQgdG8gZ2V0IGhlYWRlciB2MiBlbnRyaWVzIGRhdGEgZm9yICR7ZX0uIFRvdGFsIHNpemUgdG9vIGxhcmdlYCk7Y29uc3QgYz1yLnNsaWNlKHIubGVuZ3RoLWEpO3JldHVybiBwYXJzZVJlY29yZFYyKG8ucmVtYWluaW5nLGMsaS52YWx1ZSl9ZnVuY3Rpb24gcGFyc2VSZWNvcmQoZSxyKXtjb25zdCB0PWUuYnVmZmVyLnNsaWNlKDAsNSksbj1uZXcgRGF0YVZpZXcodCkuZ2V0VWludDMyKDAsITApO2lmKDA9PT1uKXJldHVybiBuZXcgTWFjb3NFcnJvcigiQklPTUUiLCJwcm90b2J1ZiBzaXplIGlzIHplcm8iKTtjb25zdCBvPWUuYnVmZmVyLnNsaWNlKDgsMTcpLHM9bmV3IERhdGFWaWV3KG8pLmdldEJpZ1VpbnQ2NCgwLCEwKSxpPWUuYnVmZmVyLnNsaWNlKDE2LDI1KSxhPW5ldyBEYXRhVmlldyhpKS5nZXRCaWdVaW50NjQoMCwhMCk7bGV0IGM9biU4OzAhPWMmJihjPTgtYyk7Y29uc3QgZj1uK2MsdT1uZXcgVWludDhBcnJheShyLmJ1ZmZlci5zbGljZSgwLGYrMSkpO3JldHVybntzaXplOmYsY3JlYXRlZDpOdW1iZXIocyksY3JlYXRlZDI6TnVtYmVyKGEpLHByb3RvYnVmX2J5dGVzOnUscmVtYWluaW5nOm5ldyBVaW50OEFycmF5KHIuYnVmZmVyLnNsaWNlKGYpKX19ZnVuY3Rpb24gcGFyc2VSZWNvcmRWMihlLHIsdCl7bGV0IG49cixvPTA7Y29uc3Qgcz1bXTtmb3IoO288dDspe2NvbnN0IGU9bm9tVW5zaWduZWRGb3VyQnl0ZXMobiwxKTtpZihlIGluc3RhbmNlb2YgTm9tRXJyb3IpcmV0dXJuIG5ldyBNYWNvc0Vycm9yKCJCSU9NRSIsYGZhaWxlZCB0byBnZXQgZW5kIG9mZnNldDogJHtlfWApO2NvbnN0IHI9bm9tVW5zaWduZWRGb3VyQnl0ZXMoZS5yZW1haW5pbmcsMSk7aWYociBpbnN0YW5jZW9mIE5vbUVycm9yKXJldHVybiBuZXcgTWFjb3NFcnJvcigiQklPTUUiLGBmYWlsZWQgdG8gZ2V0IHN0YXRlOiAke3J9YCk7Y29uc3QgdD1ub21VbnNpZ25lZEVpZ2h0Qnl0ZXMoci5yZW1haW5pbmcsMSk7aWYodCBpbnN0YW5jZW9mIE5vbUVycm9yKXJldHVybiBuZXcgTWFjb3NFcnJvcigiQklPTUUiLGBmYWlsZWQgdG8gZW50cnkgY3JlYXRlZDogJHt0fWApO249dC5yZW1haW5pbmcsbysrO2NvbnN0IGk9e2VuZF9vZmZzZXQ6ZS52YWx1ZSxzdGF0ZTpyLnZhbHVlLGVudHJ5X2NyZWF0ZWQ6TnVtYmVyKHQudmFsdWUpfTtzLnB1c2goaSl9cy5yZXZlcnNlKCk7Y29uc3QgaT1bXTtuPWU7bGV0IGE9MDtmb3IoY29uc3QgZSBvZiBzKXtpZig0PT09ZS5zdGF0ZSljb250aW51ZTtsZXQgcj0oZS5lbmRfb2Zmc2V0LWEpJTQ7MCE9ciYmKHI9NC1yKTtjb25zdCB0PWUuZW5kX29mZnNldCtyLWE7YSs9dDtjb25zdCBvPXRha2Uobix0KTtpZihvIGluc3RhbmNlb2YgTm9tRXJyb3IpcmV0dXJuIG5ldyBNYWNvc0Vycm9yKCJCSU9NRSIsYGZhaWxlZCB0byBub20gcHJvdG9idWYgYnl0ZXM6ICR7b31gKTtjb25zdCBzPW5vbVVuc2lnbmVkRWlnaHRCeXRlcyhvLm5vbW1lZCwxKTtpZihzIGluc3RhbmNlb2YgTm9tRXJyb3IpcmV0dXJuIG5ldyBNYWNvc0Vycm9yKCJCSU9NRSIsYGZhaWxlZCB0byBnZXQgc3RhcnQgb2YgcHJvdG9idWYgYnl0ZXM6ICR7c31gKTtjb25zdCBjPXtzaXplOnQsY3JlYXRlZDpOdW1iZXIoZS5lbnRyeV9jcmVhdGVkKSxjcmVhdGVkMjowLHByb3RvYnVmX2J5dGVzOnMucmVtYWluaW5nLHJlbWFpbmluZzpuZXcgVWludDhBcnJheX07aS5wdXNoKGMpLG49by5yZW1haW5pbmd9cmV0dXJuIGl9ZnVuY3Rpb24gbWFpbigpe2NvbnN0IGU9cGFyc2VCaW9tZSghMCk7Y29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZSkpfW1haW4oKTs=";
        let mut output = output_options("runtime_test", "local", "./tmp", false);
        let script = JSScript {
            name: String::from("protobuf_test"),
            script: test.to_string(),
        };
        execute_script(&mut output, &script).unwrap();
    }
}
