use crate::artifacts::os::windows::ese::{
    helper::{
        dump_table_columns, get_all_pages, get_catalog_info, get_filtered_page_data, get_page_data,
    },
    tables::TableInfo,
};
use deno_core::{error::AnyError, op2};
use std::collections::HashMap;

#[op2]
#[string]
pub(crate) fn get_catalog(#[string] path: String) -> Result<String, AnyError> {
    let ese = get_catalog_info(&path)?;

    let results = serde_json::to_string(&ese)?;
    Ok(results)
}

#[op2]
#[serde]
pub(crate) fn get_pages(#[string] path: String, first_page: u32) -> Result<Vec<u32>, AnyError> {
    let ese = get_all_pages(&path, &first_page)?;

    Ok(ese)
}

#[op2]
#[string]
pub(crate) fn page_data(
    #[string] path: String,
    #[serde] pages: Vec<u32>,
    #[string] info_string: String,
    #[string] name: String,
) -> Result<String, AnyError> {
    let mut info: TableInfo = serde_json::from_str(&info_string)?;
    let ese = get_page_data(&path, &pages, &mut info, &name)?;

    let results = serde_json::to_string(&ese)?;
    Ok(results)
}

#[op2]
#[string]
pub(crate) fn filter_page_data(
    #[string] path: String,
    #[serde] pages: Vec<u32>,
    #[string] info_string: String,
    #[string] name: String,
    #[string] column_name: String,
    #[serde] mut column_values: HashMap<String, bool>,
) -> Result<String, AnyError> {
    let mut info: TableInfo = serde_json::from_str(&info_string)?;
    let ese = get_filtered_page_data(
        &path,
        &pages,
        &mut info,
        &name,
        &column_name,
        &mut column_values,
    )?;

    let results = serde_json::to_string(&ese)?;
    Ok(results)
}

#[op2]
#[string]
pub(crate) fn get_table_columns(
    #[string] path: String,
    #[serde] pages: Vec<u32>,
    #[string] info_string: String,
    #[string] name: String,
    #[serde] column_names: Vec<String>,
) -> Result<String, AnyError> {
    let mut info: TableInfo = serde_json::from_str(&info_string)?;
    let ese = dump_table_columns(&path, &pages, &mut info, &name, &column_names)?;

    let results = serde_json::to_string(&ese)?;
    Ok(results)
}

#[cfg(test)]
mod tests {
    use crate::{
        runtime::deno::execute_script, structs::artifacts::runtime::script::JSScript,
        structs::toml::Output,
    };

    fn output_options(name: &str, output: &str, directory: &str, compress: bool) -> Output {
        Output {
            name: name.to_string(),
            directory: directory.to_string(),
            format: String::from("json"),
            compress,
            url: Some(String::new()),
            api_key: Some(String::new()),
            endpoint_id: String::from("abcd"),
            collection_id: 0,
            output: output.to_string(),
            filter_name: None,
            filter_script: None,
            logging: None,
        }
    }

    #[test]
    fn test_get_catalog() {
        let test = "Ly8gLi4vLi4vUHJvamVjdHMvYXJ0ZW1pcy1hcGkvc3JjL3V0aWxzL2Vycm9yLnRzCnZhciBFcnJvckJhc2UgPSBjbGFzcyBleHRlbmRzIEVycm9yIHsKICBjb25zdHJ1Y3RvcihuYW1lLCBtZXNzYWdlKSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7CiAgfQp9OwoKLy8gLi4vLi4vUHJvamVjdHMvYXJ0ZW1pcy1hcGkvc3JjL3dpbmRvd3MvZXJyb3JzLnRzCnZhciBXaW5kb3dzRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yQmFzZSB7Cn07CgovLyAuLi8uLi9Qcm9qZWN0cy9hcnRlbWlzLWFwaS9zcmMvd2luZG93cy9lc2UudHMKZnVuY3Rpb24gY2F0YWxvZ0luZm8ocGF0aCkgewogIHRyeSB7CiAgICBjb25zdCBkYXRhID0gRGVuby5jb3JlLm9wcy5nZXRfY2F0YWxvZyhwYXRoKTsKICAgIGNvbnN0IHJlc3VsdHMgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfSBjYXRjaCAoZXJyKSB7CiAgICByZXR1cm4gbmV3IFdpbmRvd3NFcnJvcigiRVNFIiwgYGZhaWxlZCB0byBwYXJzZSBlc2UgJHtwYXRofTogJHtlcnJ9YCk7CiAgfQp9CgovLyBtYWluLnRzCmZ1bmN0aW9uIG1haW4oKSB7CiAgY29uc3QgcmVzdWx0cyA9IGNhdGFsb2dJbmZvKCJDOlxcUHJvZ3JhbURhdGFcXE1pY3Jvc29mdFxcU2VhcmNoXFxEYXRhXFxBcHBsaWNhdGlvbnNcXFdpbmRvd3NcXFdpbmRvd3MuZWRiIik7CiAgaWYgKHJlc3VsdHMgaW5zdGFuY2VvZiBXaW5kb3dzRXJyb3IpIHsKICAgIHJldHVybjsKICB9CiAgZm9yIChjb25zdCBlbnRyeSBvZiByZXN1bHRzKSB7CiAgICBjb25zb2xlLmxvZyhgTmFtZTogJHtlbnRyeS5uYW1lfWApOwogICAgYnJlYWs7CiAgfQp9Cm1haW4oKTsK";
        let mut output = output_options("runtime_test", "local", "./tmp", false);
        let script = JSScript {
            name: String::from("ese_catalog"),
            script: test.to_string(),
        };
        execute_script(&mut output, &script).unwrap();
    }

    #[test]
    fn test_get_pages_and_data_rows() {
        let test = "Ly8gLi4vLi4vUHJvamVjdHMvYXJ0ZW1pcy1hcGkvc3JjL3V0aWxzL2Vycm9yLnRzCnZhciBFcnJvckJhc2UgPSBjbGFzcyBleHRlbmRzIEVycm9yIHsKICBjb25zdHJ1Y3RvcihuYW1lLCBtZXNzYWdlKSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7CiAgfQp9OwoKLy8gLi4vLi4vUHJvamVjdHMvYXJ0ZW1pcy1hcGkvc3JjL3dpbmRvd3MvZXJyb3JzLnRzCnZhciBXaW5kb3dzRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yQmFzZSB7Cn07CgovLyAuLi8uLi9Qcm9qZWN0cy9hcnRlbWlzLWFwaS9zcmMvd2luZG93cy9lc2UudHMKZnVuY3Rpb24gY2F0YWxvZ0luZm8ocGF0aCkgewogIHRyeSB7CiAgICBjb25zdCBkYXRhID0gRGVuby5jb3JlLm9wcy5nZXRfY2F0YWxvZyhwYXRoKTsKICAgIGNvbnN0IHJlc3VsdHMgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfSBjYXRjaCAoZXJyKSB7CiAgICByZXR1cm4gbmV3IFdpbmRvd3NFcnJvcigKICAgICAgIkVTRSIsCiAgICAgIGBmYWlsZWQgdG8gcGFyc2UgZXNlIGNhdGFsb2cgJHtwYXRofTogJHtlcnJ9YAogICAgKTsKICB9Cn0KZnVuY3Rpb24gdGFibGVJbmZvKGNhdGFsb2csIHRhYmxlX25hbWUpIHsKICBjb25zdCBpbmZvID0gewogICAgb2JqX2lkX3RhYmxlOiAwLAogICAgdGFibGVfcGFnZTogMCwKICAgIHRhYmxlX25hbWU6ICIiLAogICAgY29sdW1uX2luZm86IFtdLAogICAgbG9uZ192YWx1ZV9wYWdlOiAwCiAgfTsKICBmb3IgKGNvbnN0IGVudHJ5IG9mIGNhdGFsb2cpIHsKICAgIGlmIChlbnRyeS5uYW1lID09PSB0YWJsZV9uYW1lKSB7CiAgICAgIGluZm8udGFibGVfbmFtZSA9IGVudHJ5Lm5hbWU7CiAgICAgIGluZm8ub2JqX2lkX3RhYmxlID0gZW50cnkub2JqX2lkX3RhYmxlOwogICAgICBpbmZvLnRhYmxlX3BhZ2UgPSBlbnRyeS5jb2x1bW5fb3JfZmF0aGVyX2RhdGFfcGFnZTsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAoZW50cnkub2JqX2lkX3RhYmxlID09PSBpbmZvLm9ial9pZF90YWJsZSAmJiBpbmZvLnRhYmxlX25hbWUubGVuZ3RoICE9IDAgJiYgZW50cnkuY2F0YWxvZ190eXBlID09PSAiQ29sdW1uIiAvKiBDb2x1bW4gKi8pIHsKICAgICAgY29uc3QgY29sdW1uX2luZm8gPSB7CiAgICAgICAgY29sdW1uX3R5cGU6IGdldENvbHVtblR5cGUoZW50cnkuY29sdW1uX29yX2ZhdGhlcl9kYXRhX3BhZ2UpLAogICAgICAgIGNvbHVtbl9uYW1lOiBlbnRyeS5uYW1lLAogICAgICAgIGNvbHVtbl9kYXRhOiBbXSwKICAgICAgICBjb2x1bW5faWQ6IGVudHJ5LmlkLAogICAgICAgIGNvbHVtbl9mbGFnczogZ2V0Q29sdW1uRmxhZ3MoZW50cnkuZmxhZ3MpLAogICAgICAgIGNvbHVtbl9zcGFjZV91c2FnZTogZW50cnkuc3BhY2VfdXNhZ2UsCiAgICAgICAgY29sdW1uX3RhZ2dlZF9mbGFnczogW10KICAgICAgfTsKICAgICAgaW5mby5jb2x1bW5faW5mby5wdXNoKGNvbHVtbl9pbmZvKTsKICAgIH0gZWxzZSBpZiAoZW50cnkub2JqX2lkX3RhYmxlID09PSBpbmZvLm9ial9pZF90YWJsZSAmJiBpbmZvLnRhYmxlX25hbWUubGVuZ3RoICE9IDAgJiYgZW50cnkuY2F0YWxvZ190eXBlID09PSAiTG9uZ1ZhbHVlIiAvKiBMb25nVmFsdWUgKi8pIHsKICAgICAgaW5mby5sb25nX3ZhbHVlX3BhZ2UgPSBlbnRyeS5jb2x1bW5fb3JfZmF0aGVyX2RhdGFfcGFnZTsKICAgIH0KICB9CiAgcmV0dXJuIGluZm87Cn0KZnVuY3Rpb24gZ2V0UGFnZXMocGF0aCwgZmlyc3RfcGFnZSkgewogIHRyeSB7CiAgICBjb25zdCBkYXRhID0gRGVuby5jb3JlLm9wcy5nZXRfcGFnZXMocGF0aCwgZmlyc3RfcGFnZSk7CiAgICBjb25zdCByZXN1bHRzID0gZGF0YTsKICAgIHJldHVybiByZXN1bHRzOwogIH0gY2F0Y2ggKGVycikgewogICAgcmV0dXJuIG5ldyBXaW5kb3dzRXJyb3IoIkVTRSIsIGBmYWlsZWQgdG8gcGFyc2UgZXNlIHBhZ2VzICR7cGF0aH06ICR7ZXJyfWApOwogIH0KfQpmdW5jdGlvbiBnZXRSb3dzKHBhdGgsIHBhZ2VzLCBpbmZvLCBuYW1lKSB7CiAgdHJ5IHsKICAgIGNvbnN0IGRhdGEgPSBEZW5vLmNvcmUub3BzLnBhZ2VfZGF0YShwYXRoLCBwYWdlcywgSlNPTi5zdHJpbmdpZnkoaW5mbyksIG5hbWUpOwogICAgY29uc3QgcmVzdWx0cyA9IEpTT04ucGFyc2UoZGF0YSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9IGNhdGNoIChlcnIpIHsKICAgIHJldHVybiBuZXcgV2luZG93c0Vycm9yKCJFU0UiLCBgZmFpbGVkIHRvIHBhcnNlIGVzZSByb3dzICR7cGF0aH06ICR7ZXJyfWApOwogIH0KfQpmdW5jdGlvbiBnZXRDb2x1bW5UeXBlKGNvbHVtbl90eXBlKSB7CiAgc3dpdGNoIChjb2x1bW5fdHlwZSkgewogICAgY2FzZSAwOgogICAgICByZXR1cm4gIk5pbCIgLyogTmlsICovOwogICAgY2FzZSAxOgogICAgICByZXR1cm4gIkJpdCIgLyogQml0ICovOwogICAgY2FzZSAyOgogICAgICByZXR1cm4gIlVuc2lnbmVkQnl0ZSIgLyogVW5zaWduZWRCeXRlICovOwogICAgY2FzZSAzOgogICAgICByZXR1cm4gIlNob3J0IiAvKiBTaG9ydCAqLzsKICAgIGNhc2UgNDoKICAgICAgcmV0dXJuICJMb25nIiAvKiBMb25nICovOwogICAgY2FzZSA1OgogICAgICByZXR1cm4gIkN1cnJlbmN5IiAvKiBDdXJyZW5jeSAqLzsKICAgIGNhc2UgNjoKICAgICAgcmV0dXJuICJGbG9hdDMyIiAvKiBGbG9hdDMyICovOwogICAgY2FzZSA3OgogICAgICByZXR1cm4gIkZsb2F0NjQiIC8qIEZsb2F0NjQgKi87CiAgICBjYXNlIDg6CiAgICAgIHJldHVybiAiRGF0ZVRpbWUiIC8qIERhdGVUaW1lICovOwogICAgY2FzZSA5OgogICAgICByZXR1cm4gIkJpbmFyeSIgLyogQmluYXJ5ICovOwogICAgY2FzZSAxMDoKICAgICAgcmV0dXJuICJUZXh0IiAvKiBUZXh0ICovOwogICAgY2FzZSAxMToKICAgICAgcmV0dXJuICJMb25nQmluYXJ5IiAvKiBMb25nQmluYXJ5ICovOwogICAgY2FzZSAxMjoKICAgICAgcmV0dXJuICJMb25nVGV4dCIgLyogTG9uZ1RleHQgKi87CiAgICBjYXNlIDEzOgogICAgICByZXR1cm4gIlN1cGVyTG9uZyIgLyogU3VwZXJMb25nICovOwogICAgY2FzZSAxNDoKICAgICAgcmV0dXJuICJVbnNpZ25lZExvbmciIC8qIFVuc2lnbmVkTG9uZyAqLzsKICAgIGNhc2UgMTU6CiAgICAgIHJldHVybiAiTG9uZ0xvbmciIC8qIExvbmdMb25nICovOwogICAgY2FzZSAxNjoKICAgICAgcmV0dXJuICJHdWlkIiAvKiBHdWlkICovOwogICAgY2FzZSAxNzoKICAgICAgcmV0dXJuICJVbnNpZ25lZFNob3J0IiAvKiBVbnNpZ25lZFNob3J0ICovOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuICJVbmtub3duIiAvKiBVbmtub3duICovOwogIH0KfQpmdW5jdGlvbiBnZXRDb2x1bW5GbGFncyhmbGFncykgewogIGNvbnN0IG5vdF9udWxsID0gMTsKICBjb25zdCB2ZXJzaW9uID0gMjsKICBjb25zdCBpbmNyZW1lbnQgPSA0OwogIGNvbnN0IG11bHRpID0gODsKICBjb25zdCBmbGFnX2RlZmF1bHQgPSAxNjsKICBjb25zdCBlc2Nyb3cgPSAzMjsKICBjb25zdCBmaW5hbGl6ZSA9IDY0OwogIGNvbnN0IHVzZXJfZGVmaW5lID0gMTI4OwogIGNvbnN0IHRlbXBsYXRlID0gMjU2OwogIGNvbnN0IGRlbGV0ZV96ZXJvID0gNTEyOwogIGNvbnN0IHByaW1hcnkgPSAyMDQ4OwogIGNvbnN0IGNvbXByZXNzZWQgPSA0MDk2OwogIGNvbnN0IGVuY3J5cHRlZCA9IDgxOTI7CiAgY29uc3QgdmVyc2lvbmVkID0gNjU1MzY7CiAgY29uc3QgZGVsZXRlZCA9IDEzMTA3MjsKICBjb25zdCB2ZXJzaW9uX2FkZCA9IDI2MjE0NDsKICBjb25zdCBmbGFnc19kYXRhID0gW107CiAgaWYgKChmbGFncyAmIG5vdF9udWxsKSA9PT0gbm90X251bGwpIHsKICAgIGZsYWdzX2RhdGEucHVzaCgiTm90TnVsbCIgLyogTm90TnVsbCAqLyk7CiAgfQogIGlmICgoZmxhZ3MgJiB2ZXJzaW9uKSA9PT0gdmVyc2lvbikgewogICAgZmxhZ3NfZGF0YS5wdXNoKCJWZXJzaW9uIiAvKiBWZXJzaW9uICovKTsKICB9CiAgaWYgKChmbGFncyAmIGluY3JlbWVudCkgPT09IGluY3JlbWVudCkgewogICAgZmxhZ3NfZGF0YS5wdXNoKCJBdXRvSW5jcmVtZW50IiAvKiBBdXRvSW5jcmVtZW50ICovKTsKICB9CiAgaWYgKChmbGFncyAmIG11bHRpKSA9PT0gbXVsdGkpIHsKICAgIGZsYWdzX2RhdGEucHVzaCgiTXVsdGlWYWx1ZWQiIC8qIE11bHRpVmFsdWVkICovKTsKICB9CiAgaWYgKChmbGFncyAmIGZsYWdfZGVmYXVsdCkgPT09IGZsYWdfZGVmYXVsdCkgewogICAgZmxhZ3NfZGF0YS5wdXNoKCJEZWZhdWx0IiAvKiBEZWZhdWx0ICovKTsKICB9CiAgaWYgKChmbGFncyAmIGVzY3JvdykgPT09IGVzY3JvdykgewogICAgZmxhZ3NfZGF0YS5wdXNoKCJFc2Nyb3dVcGRhdGUiIC8qIEVzY3Jvd1VwZGF0ZSAqLyk7CiAgfQogIGlmICgoZmxhZ3MgJiBmaW5hbGl6ZSkgPT09IGZpbmFsaXplKSB7CiAgICBmbGFnc19kYXRhLnB1c2goIkZpbmFsaXplIiAvKiBGaW5hbGl6ZSAqLyk7CiAgfQogIGlmICgoZmxhZ3MgJiB1c2VyX2RlZmluZSkgPT09IHVzZXJfZGVmaW5lKSB7CiAgICBmbGFnc19kYXRhLnB1c2goIlVzZXJEZWZpbmVkRGVmYXVsdCIgLyogVXNlckRlZmluZWREZWZhdWx0ICovKTsKICB9CiAgaWYgKChmbGFncyAmIHRlbXBsYXRlKSA9PT0gdGVtcGxhdGUpIHsKICAgIGZsYWdzX2RhdGEucHVzaCgiVGVtcGxhdGVDb2x1bW5FU0U5OCIgLyogVGVtcGxhdGVDb2x1bW5FU0U5OCAqLyk7CiAgfQogIGlmICgoZmxhZ3MgJiBkZWxldGVfemVybykgPT09IGRlbGV0ZV96ZXJvKSB7CiAgICBmbGFnc19kYXRhLnB1c2goIkRlbGV0ZU9uWmVybyIgLyogRGVsZXRlT25aZXJvICovKTsKICB9CiAgaWYgKChmbGFncyAmIHByaW1hcnkpID09PSBwcmltYXJ5KSB7CiAgICBmbGFnc19kYXRhLnB1c2goIlByaW1hcnlJbmRleFBsYWNlaG9sZGVyIiAvKiBQcmltYXJ5SW5kZXhQbGFjZWhvbGRlciAqLyk7CiAgfQogIGlmICgoZmxhZ3MgJiBjb21wcmVzc2VkKSA9PT0gY29tcHJlc3NlZCkgewogICAgZmxhZ3NfZGF0YS5wdXNoKCJDb21wcmVzc2VkIiAvKiBDb21wcmVzc2VkICovKTsKICB9CiAgaWYgKChmbGFncyAmIGVuY3J5cHRlZCkgPT09IGVuY3J5cHRlZCkgewogICAgZmxhZ3NfZGF0YS5wdXNoKCJFbmNyeXB0ZWQiIC8qIEVuY3J5cHRlZCAqLyk7CiAgfQogIGlmICgoZmxhZ3MgJiB2ZXJzaW9uZWQpID09PSB2ZXJzaW9uZWQpIHsKICAgIGZsYWdzX2RhdGEucHVzaCgiVmVyc2lvbmVkIiAvKiBWZXJzaW9uZWQgKi8pOwogIH0KICBpZiAoKGZsYWdzICYgZGVsZXRlZCkgPT09IGRlbGV0ZWQpIHsKICAgIGZsYWdzX2RhdGEucHVzaCgiRGVsZXRlZCIgLyogRGVsZXRlZCAqLyk7CiAgfQogIGlmICgoZmxhZ3MgJiB2ZXJzaW9uX2FkZCkgPT09IHZlcnNpb25fYWRkKSB7CiAgICBmbGFnc19kYXRhLnB1c2goIlZlcnNpb25lZEFkZCIgLyogVmVyc2lvbmVkQWRkICovKTsKICB9CiAgcmV0dXJuIGZsYWdzX2RhdGE7Cn0KCi8vIG1haW4udHMKZnVuY3Rpb24gbWFpbigpIHsKICBjb25zdCBwYXRoID0gIkM6XFxXaW5kb3dzXFxzZWN1cml0eVxcZGF0YWJhc2VcXHNlY2VkaXQuc2RiIjsKICBjb25zdCB0YWJsZSA9ICJTbVRibFNtcCI7CiAgY29uc3QgcmVzdWx0cyA9IGNhdGFsb2dJbmZvKHBhdGgpOwogIGlmIChyZXN1bHRzIGluc3RhbmNlb2YgV2luZG93c0Vycm9yKSB7CiAgICByZXR1cm47CiAgfQogIGNvbnN0IGluZm8gPSB0YWJsZUluZm8ocmVzdWx0cywgdGFibGUpOwogIGlmIChpbmZvIGluc3RhbmNlb2YgV2luZG93c0Vycm9yKSB7CiAgICByZXR1cm47CiAgfQogIGNvbnN0IHBhZ2VzID0gZ2V0UGFnZXMocGF0aCwgaW5mby50YWJsZV9wYWdlKTsKICBpZiAocGFnZXMgaW5zdGFuY2VvZiBXaW5kb3dzRXJyb3IpIHsKICAgIHJldHVybjsKICB9CiAgbGV0IHN1bSA9IDA7CiAgY29uc3QgcGFnZV9saW1pdCA9IDEwOwogIGxldCBwYWdlX2NodW5rID0gW107CiAgZm9yIChjb25zdCBwYWdlIG9mIHBhZ2VzKSB7CiAgICBpZiAocGFnZSA9PT0gMCkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIHBhZ2VfY2h1bmsucHVzaChwYWdlKTsKICAgIGlmIChwYWdlX2NodW5rLmxlbmd0aCAhPSBwYWdlX2xpbWl0KSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgY29uc3Qgcm93cyA9IGdldFJvd3MocGF0aCwgcGFnZV9jaHVuaywgaW5mbywgdGFibGUpOwogICAgaWYgKHJvd3MgaW5zdGFuY2VvZiBXaW5kb3dzRXJyb3IpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgc3VtICs9IHJvd3NbdGFibGVdLmxlbmd0aDsKICAgIHBhZ2VfY2h1bmsgPSBbXTsKICB9CiAgaWYgKHBhZ2VfY2h1bmsubGVuZ3RoICE9IDApIHsKICAgIGNvbnN0IHJvd3MgPSBnZXRSb3dzKHBhdGgsIHBhZ2VfY2h1bmssIGluZm8sIHRhYmxlKTsKICAgIGlmIChyb3dzIGluc3RhbmNlb2YgV2luZG93c0Vycm9yKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHN1bSArPSByb3dzWyJTbVRibFNtcCJdLmxlbmd0aDsKICB9CiAgY29uc29sZS5sb2coYFRvdGFsIHJvd3M6ICR7c3VtfWApOwp9Cm1haW4oKTsK";
        let mut output = output_options("runtime_test", "local", "./tmp", false);
        let script = JSScript {
            name: String::from("ese_rows"),
            script: test.to_string(),
        };
        execute_script(&mut output, &script).unwrap();
    }

    #[test]
    fn test_get_columns_and_filter() {
        let test = "";
        let mut output = output_options("runtime_test", "local", "./tmp", false);
        let script = JSScript {
            name: String::from("ese_column_filter"),
            script: test.to_string(),
        };
        execute_script(&mut output, &script).unwrap();
    }
}
