use super::error::DecryptError;
use aes::{
    cipher::{block_padding::Pkcs7, BlockDecryptMut, KeyIvInit},
    Aes256,
};
use log::error;

/// Decrypt AES256 data
pub(crate) fn decrypt_aes_data(
    key: &[u8],
    iv: &[u8],
    data: &mut [u8],
) -> Result<Vec<u8>, DecryptError> {
    let key_length = 32;
    let iv_length = 16;
    if key.len() != key_length || iv.len() != iv_length {
        return Err(DecryptError::WrongAesKeyLength);
    }

    type Aes256Cbc = cbc::Decryptor<Aes256>;

    let cipher = Aes256Cbc::new(key.into(), iv.into());
    let decrypt_result = cipher.decrypt_padded_mut::<Pkcs7>(data);
    let decrypt = match decrypt_result {
        Ok(result) => result,
        Err(err) => {
            error!("[artemis-core] Failed to decrypt data: {err:?}");
            return Err(DecryptError::AesDecrypt);
        }
    };

    Ok(decrypt.to_vec())
}

#[cfg(test)]
mod tests {
    use super::decrypt_aes_data;

    #[test]
    fn test_decrypt_aes_data() {
        let mut data = [
            177, 130, 61, 127, 113, 148, 7, 199, 220, 119, 83, 246, 210, 245, 173, 206, 14, 235,
            177, 43, 119, 183, 188, 132, 59, 137, 178, 198, 193, 157, 244, 37, 64, 102, 234, 76,
            68, 101, 225, 209, 16, 160, 22, 26, 67, 192, 188, 111, 189, 46, 13, 100, 179, 147, 183,
            110, 224, 85, 223, 126, 169, 11, 96, 157, 243, 22, 143, 206, 36, 4, 216, 135, 110, 6,
            189, 60, 40, 58, 159, 141, 32, 123, 238, 125, 143, 58, 228, 155, 30, 90, 217, 112, 242,
            201, 152, 183, 185, 29, 143, 16, 72, 148, 106, 78, 111, 183, 1, 169, 232, 183, 92, 201,
        ];

        let key = [
            56, 214, 139, 47, 205, 48, 227, 94, 158, 13, 119, 245, 119, 232, 34, 245, 106, 109, 58,
            9, 28, 39, 184, 67, 20, 249, 182, 186, 136, 254, 69, 6,
        ];

        let iv = [0; 16];

        let results = decrypt_aes_data(&key, &iv, &mut data).unwrap();

        assert_eq!(
            results,
            [
                49, 0, 0, 0, 49, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 56, 0, 0, 0, 56, 0, 0, 0, 48,
                0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 54, 0, 0,
                0, 124, 0, 0, 0, 54, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 49, 0, 0, 0, 53, 0, 0, 0,
                48, 0, 0, 0, 49, 0, 0, 0, 57, 0, 0, 0, 124, 0, 0, 0, 124, 0, 0, 0, 48, 0, 0, 0,
                124, 0, 0, 0, 48, 0, 0, 0
            ]
        );
    }

    #[test]
    #[should_panic(expected = "WrongAesKeyLength")]
    fn test_decrypt_aes_data_bad_key() {
        let mut data = [
            177, 130, 61, 127, 113, 148, 7, 199, 220, 119, 83, 246, 210, 245, 173, 206, 14, 235,
            177, 43, 119, 183, 188, 132, 59, 137, 178, 198, 193, 157, 244, 37, 64, 102, 234, 76,
            68, 101, 225, 209, 16, 160, 22, 26, 67, 192, 188, 111, 189, 46, 13, 100, 179, 147, 183,
            110, 224, 85, 223, 126, 169, 11, 96, 157, 243, 22, 143, 206, 36, 4, 216, 135, 110, 6,
            189, 60, 40, 58, 159, 141, 32, 123, 238, 125, 143, 58, 228, 155, 30, 90, 217, 112, 242,
            201, 152, 183, 185, 29, 143, 16, 72, 148, 106, 78, 111, 183, 1, 169, 232, 183, 92, 201,
        ];

        let key = [
            56, 214, 139, 47, 205, 48, 227, 94, 158, 13, 119, 245, 119, 232, 34, 245, 106, 109, 58,
            9, 28, 39, 184, 67, 20, 249, 182, 186,
        ];

        let iv = [0; 16];

        let results = decrypt_aes_data(&key, &iv, &mut data).unwrap();

        assert_eq!(
            results,
            [
                49, 0, 0, 0, 49, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 56, 0, 0, 0, 56, 0, 0, 0, 48,
                0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 54, 0, 0,
                0, 124, 0, 0, 0, 54, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 49, 0, 0, 0, 53, 0, 0, 0,
                48, 0, 0, 0, 49, 0, 0, 0, 57, 0, 0, 0, 124, 0, 0, 0, 124, 0, 0, 0, 48, 0, 0, 0,
                124, 0, 0, 0, 48, 0, 0, 0
            ]
        );
    }

    #[test]
    #[should_panic(expected = "AesDecrypt")]
    fn test_decrypt_aes_data_wrong_key() {
        let mut data = [
            177, 130, 61, 127, 113, 148, 7, 199, 220, 119, 83, 246, 210, 245, 173, 206, 14, 235,
            177, 43, 119, 183, 188, 132, 59, 137, 178, 198, 193, 157, 244, 37, 64, 102, 234, 76,
            68, 101, 225, 209, 16, 160, 22, 26, 67, 192, 188, 111, 189, 46, 13, 100, 179, 147, 183,
            110, 224, 85, 223, 126, 169, 11, 96, 157, 243, 22, 143, 206, 36, 4, 216, 135, 110, 6,
            189, 60, 40, 58, 159, 141, 32, 123, 238, 125, 143, 58, 228, 155, 30, 90, 217, 112, 242,
            201, 152, 183, 185, 29, 143, 16, 72, 148, 106, 78, 111, 183, 1, 169, 232, 183, 92, 201,
        ];

        let key = [
            99, 120, 139, 47, 205, 48, 227, 94, 158, 13, 119, 245, 119, 232, 34, 245, 106, 109, 58,
            9, 28, 39, 184, 67, 20, 249, 182, 186, 123, 124, 78, 33,
        ];

        let iv = [0; 16];

        let results = decrypt_aes_data(&key, &iv, &mut data).unwrap();

        assert_eq!(
            results,
            [
                49, 0, 0, 0, 49, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 56, 0, 0, 0, 56, 0, 0, 0, 48,
                0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 54, 0, 0,
                0, 124, 0, 0, 0, 54, 0, 0, 0, 51, 0, 0, 0, 51, 0, 0, 0, 49, 0, 0, 0, 53, 0, 0, 0,
                48, 0, 0, 0, 49, 0, 0, 0, 57, 0, 0, 0, 124, 0, 0, 0, 124, 0, 0, 0, 48, 0, 0, 0,
                124, 0, 0, 0, 48, 0, 0, 0
            ]
        );
    }
}
