system = "windows"

[output]
name = "dfir_museum"
directory = "./tmp"
format = "json"
compress = false
endpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"
collection_id = 1
output = "local"

[[artifacts]]
artifact_name = "script"
[artifacts.script]
name = "dfir_museum_test"
# This collection parses supported DFIR Musuem artifacts at C:\DFIRArtifactMuseum from multiple different Windows versions
script = ""
